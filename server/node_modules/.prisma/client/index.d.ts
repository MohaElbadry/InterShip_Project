
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model InsurancePolicy
 * 
 */
export type InsurancePolicy = $Result.DefaultSelection<Prisma.$InsurancePolicyPayload>
/**
 * Model Vehicle
 * 
 */
export type Vehicle = $Result.DefaultSelection<Prisma.$VehiclePayload>
/**
 * Model Accident
 * 
 */
export type Accident = $Result.DefaultSelection<Prisma.$AccidentPayload>
/**
 * Model Claim
 * 
 */
export type Claim = $Result.DefaultSelection<Prisma.$ClaimPayload>
/**
 * Model AccidentVehicle
 * 
 */
export type AccidentVehicle = $Result.DefaultSelection<Prisma.$AccidentVehiclePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.insurancePolicy`: Exposes CRUD operations for the **InsurancePolicy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InsurancePolicies
    * const insurancePolicies = await prisma.insurancePolicy.findMany()
    * ```
    */
  get insurancePolicy(): Prisma.InsurancePolicyDelegate<ExtArgs>;

  /**
   * `prisma.vehicle`: Exposes CRUD operations for the **Vehicle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vehicles
    * const vehicles = await prisma.vehicle.findMany()
    * ```
    */
  get vehicle(): Prisma.VehicleDelegate<ExtArgs>;

  /**
   * `prisma.accident`: Exposes CRUD operations for the **Accident** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accidents
    * const accidents = await prisma.accident.findMany()
    * ```
    */
  get accident(): Prisma.AccidentDelegate<ExtArgs>;

  /**
   * `prisma.claim`: Exposes CRUD operations for the **Claim** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Claims
    * const claims = await prisma.claim.findMany()
    * ```
    */
  get claim(): Prisma.ClaimDelegate<ExtArgs>;

  /**
   * `prisma.accidentVehicle`: Exposes CRUD operations for the **AccidentVehicle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccidentVehicles
    * const accidentVehicles = await prisma.accidentVehicle.findMany()
    * ```
    */
  get accidentVehicle(): Prisma.AccidentVehicleDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.18.0
   * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    InsurancePolicy: 'InsurancePolicy',
    Vehicle: 'Vehicle',
    Accident: 'Accident',
    Claim: 'Claim',
    AccidentVehicle: 'AccidentVehicle'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "insurancePolicy" | "vehicle" | "accident" | "claim" | "accidentVehicle"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      InsurancePolicy: {
        payload: Prisma.$InsurancePolicyPayload<ExtArgs>
        fields: Prisma.InsurancePolicyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InsurancePolicyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePolicyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InsurancePolicyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePolicyPayload>
          }
          findFirst: {
            args: Prisma.InsurancePolicyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePolicyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InsurancePolicyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePolicyPayload>
          }
          findMany: {
            args: Prisma.InsurancePolicyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePolicyPayload>[]
          }
          create: {
            args: Prisma.InsurancePolicyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePolicyPayload>
          }
          createMany: {
            args: Prisma.InsurancePolicyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InsurancePolicyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePolicyPayload>
          }
          update: {
            args: Prisma.InsurancePolicyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePolicyPayload>
          }
          deleteMany: {
            args: Prisma.InsurancePolicyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InsurancePolicyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InsurancePolicyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePolicyPayload>
          }
          aggregate: {
            args: Prisma.InsurancePolicyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInsurancePolicy>
          }
          groupBy: {
            args: Prisma.InsurancePolicyGroupByArgs<ExtArgs>
            result: $Utils.Optional<InsurancePolicyGroupByOutputType>[]
          }
          count: {
            args: Prisma.InsurancePolicyCountArgs<ExtArgs>
            result: $Utils.Optional<InsurancePolicyCountAggregateOutputType> | number
          }
        }
      }
      Vehicle: {
        payload: Prisma.$VehiclePayload<ExtArgs>
        fields: Prisma.VehicleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VehicleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VehicleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          findFirst: {
            args: Prisma.VehicleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VehicleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          findMany: {
            args: Prisma.VehicleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>[]
          }
          create: {
            args: Prisma.VehicleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          createMany: {
            args: Prisma.VehicleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VehicleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          update: {
            args: Prisma.VehicleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          deleteMany: {
            args: Prisma.VehicleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VehicleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VehicleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          aggregate: {
            args: Prisma.VehicleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVehicle>
          }
          groupBy: {
            args: Prisma.VehicleGroupByArgs<ExtArgs>
            result: $Utils.Optional<VehicleGroupByOutputType>[]
          }
          count: {
            args: Prisma.VehicleCountArgs<ExtArgs>
            result: $Utils.Optional<VehicleCountAggregateOutputType> | number
          }
        }
      }
      Accident: {
        payload: Prisma.$AccidentPayload<ExtArgs>
        fields: Prisma.AccidentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccidentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccidentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentPayload>
          }
          findFirst: {
            args: Prisma.AccidentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccidentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentPayload>
          }
          findMany: {
            args: Prisma.AccidentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentPayload>[]
          }
          create: {
            args: Prisma.AccidentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentPayload>
          }
          createMany: {
            args: Prisma.AccidentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccidentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentPayload>
          }
          update: {
            args: Prisma.AccidentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentPayload>
          }
          deleteMany: {
            args: Prisma.AccidentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccidentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccidentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentPayload>
          }
          aggregate: {
            args: Prisma.AccidentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccident>
          }
          groupBy: {
            args: Prisma.AccidentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccidentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccidentCountArgs<ExtArgs>
            result: $Utils.Optional<AccidentCountAggregateOutputType> | number
          }
        }
      }
      Claim: {
        payload: Prisma.$ClaimPayload<ExtArgs>
        fields: Prisma.ClaimFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClaimFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClaimPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClaimFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClaimPayload>
          }
          findFirst: {
            args: Prisma.ClaimFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClaimPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClaimFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClaimPayload>
          }
          findMany: {
            args: Prisma.ClaimFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClaimPayload>[]
          }
          create: {
            args: Prisma.ClaimCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClaimPayload>
          }
          createMany: {
            args: Prisma.ClaimCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClaimDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClaimPayload>
          }
          update: {
            args: Prisma.ClaimUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClaimPayload>
          }
          deleteMany: {
            args: Prisma.ClaimDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClaimUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClaimUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClaimPayload>
          }
          aggregate: {
            args: Prisma.ClaimAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClaim>
          }
          groupBy: {
            args: Prisma.ClaimGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClaimGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClaimCountArgs<ExtArgs>
            result: $Utils.Optional<ClaimCountAggregateOutputType> | number
          }
        }
      }
      AccidentVehicle: {
        payload: Prisma.$AccidentVehiclePayload<ExtArgs>
        fields: Prisma.AccidentVehicleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccidentVehicleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentVehiclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccidentVehicleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentVehiclePayload>
          }
          findFirst: {
            args: Prisma.AccidentVehicleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentVehiclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccidentVehicleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentVehiclePayload>
          }
          findMany: {
            args: Prisma.AccidentVehicleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentVehiclePayload>[]
          }
          create: {
            args: Prisma.AccidentVehicleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentVehiclePayload>
          }
          createMany: {
            args: Prisma.AccidentVehicleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccidentVehicleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentVehiclePayload>
          }
          update: {
            args: Prisma.AccidentVehicleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentVehiclePayload>
          }
          deleteMany: {
            args: Prisma.AccidentVehicleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccidentVehicleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccidentVehicleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentVehiclePayload>
          }
          aggregate: {
            args: Prisma.AccidentVehicleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccidentVehicle>
          }
          groupBy: {
            args: Prisma.AccidentVehicleGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccidentVehicleGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccidentVehicleCountArgs<ExtArgs>
            result: $Utils.Optional<AccidentVehicleCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    insurancePolicies: number
    vehicles: number
    claims: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    insurancePolicies?: boolean | UserCountOutputTypeCountInsurancePoliciesArgs
    vehicles?: boolean | UserCountOutputTypeCountVehiclesArgs
    claims?: boolean | UserCountOutputTypeCountClaimsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInsurancePoliciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsurancePolicyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehicleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountClaimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClaimWhereInput
  }


  /**
   * Count Type VehicleCountOutputType
   */

  export type VehicleCountOutputType = {
    insurancePolicies: number
    accidents: number
    AccidentVehicle: number
  }

  export type VehicleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    insurancePolicies?: boolean | VehicleCountOutputTypeCountInsurancePoliciesArgs
    accidents?: boolean | VehicleCountOutputTypeCountAccidentsArgs
    AccidentVehicle?: boolean | VehicleCountOutputTypeCountAccidentVehicleArgs
  }

  // Custom InputTypes
  /**
   * VehicleCountOutputType without action
   */
  export type VehicleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleCountOutputType
     */
    select?: VehicleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VehicleCountOutputType without action
   */
  export type VehicleCountOutputTypeCountInsurancePoliciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsurancePolicyWhereInput
  }

  /**
   * VehicleCountOutputType without action
   */
  export type VehicleCountOutputTypeCountAccidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccidentWhereInput
  }

  /**
   * VehicleCountOutputType without action
   */
  export type VehicleCountOutputTypeCountAccidentVehicleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccidentVehicleWhereInput
  }


  /**
   * Count Type AccidentCountOutputType
   */

  export type AccidentCountOutputType = {
    claims: number
    vehicles: number
    AccidentVehicle: number
  }

  export type AccidentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    claims?: boolean | AccidentCountOutputTypeCountClaimsArgs
    vehicles?: boolean | AccidentCountOutputTypeCountVehiclesArgs
    AccidentVehicle?: boolean | AccidentCountOutputTypeCountAccidentVehicleArgs
  }

  // Custom InputTypes
  /**
   * AccidentCountOutputType without action
   */
  export type AccidentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentCountOutputType
     */
    select?: AccidentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccidentCountOutputType without action
   */
  export type AccidentCountOutputTypeCountClaimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClaimWhereInput
  }

  /**
   * AccidentCountOutputType without action
   */
  export type AccidentCountOutputTypeCountVehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehicleWhereInput
  }

  /**
   * AccidentCountOutputType without action
   */
  export type AccidentCountOutputTypeCountAccidentVehicleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccidentVehicleWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    contact_number: string | null
    email: string | null
    date_of_birth: Date | null
    role: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    contact_number: string | null
    email: string | null
    date_of_birth: Date | null
    role: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    address: number
    contact_number: number
    email: number
    date_of_birth: number
    role: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    contact_number?: true
    email?: true
    date_of_birth?: true
    role?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    contact_number?: true
    email?: true
    date_of_birth?: true
    role?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    contact_number?: true
    email?: true
    date_of_birth?: true
    role?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    address: string
    contact_number: string
    email: string
    date_of_birth: Date
    role: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    contact_number?: boolean
    email?: boolean
    date_of_birth?: boolean
    role?: boolean
    password?: boolean
    insurancePolicies?: boolean | User$insurancePoliciesArgs<ExtArgs>
    vehicles?: boolean | User$vehiclesArgs<ExtArgs>
    claims?: boolean | User$claimsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    contact_number?: boolean
    email?: boolean
    date_of_birth?: boolean
    role?: boolean
    password?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    insurancePolicies?: boolean | User$insurancePoliciesArgs<ExtArgs>
    vehicles?: boolean | User$vehiclesArgs<ExtArgs>
    claims?: boolean | User$claimsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      insurancePolicies: Prisma.$InsurancePolicyPayload<ExtArgs>[]
      vehicles: Prisma.$VehiclePayload<ExtArgs>[]
      claims: Prisma.$ClaimPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      address: string
      contact_number: string
      email: string
      date_of_birth: Date
      role: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    insurancePolicies<T extends User$insurancePoliciesArgs<ExtArgs> = {}>(args?: Subset<T, User$insurancePoliciesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsurancePolicyPayload<ExtArgs>, T, "findMany"> | Null>
    vehicles<T extends User$vehiclesArgs<ExtArgs> = {}>(args?: Subset<T, User$vehiclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findMany"> | Null>
    claims<T extends User$claimsArgs<ExtArgs> = {}>(args?: Subset<T, User$claimsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClaimPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly contact_number: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly date_of_birth: FieldRef<"User", 'DateTime'>
    readonly role: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.insurancePolicies
   */
  export type User$insurancePoliciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsurancePolicy
     */
    select?: InsurancePolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsurancePolicyInclude<ExtArgs> | null
    where?: InsurancePolicyWhereInput
    orderBy?: InsurancePolicyOrderByWithRelationInput | InsurancePolicyOrderByWithRelationInput[]
    cursor?: InsurancePolicyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InsurancePolicyScalarFieldEnum | InsurancePolicyScalarFieldEnum[]
  }

  /**
   * User.vehicles
   */
  export type User$vehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    where?: VehicleWhereInput
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    cursor?: VehicleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * User.claims
   */
  export type User$claimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaimInclude<ExtArgs> | null
    where?: ClaimWhereInput
    orderBy?: ClaimOrderByWithRelationInput | ClaimOrderByWithRelationInput[]
    cursor?: ClaimWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClaimScalarFieldEnum | ClaimScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model InsurancePolicy
   */

  export type AggregateInsurancePolicy = {
    _count: InsurancePolicyCountAggregateOutputType | null
    _avg: InsurancePolicyAvgAggregateOutputType | null
    _sum: InsurancePolicySumAggregateOutputType | null
    _min: InsurancePolicyMinAggregateOutputType | null
    _max: InsurancePolicyMaxAggregateOutputType | null
  }

  export type InsurancePolicyAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    vehicle_id: number | null
    amount: number | null
  }

  export type InsurancePolicySumAggregateOutputType = {
    id: number | null
    user_id: number | null
    vehicle_id: number | null
    amount: number | null
  }

  export type InsurancePolicyMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    vehicle_id: number | null
    policy_number: string | null
    type: string | null
    start_date: Date | null
    end_date: Date | null
    amount: number | null
    status: string | null
  }

  export type InsurancePolicyMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    vehicle_id: number | null
    policy_number: string | null
    type: string | null
    start_date: Date | null
    end_date: Date | null
    amount: number | null
    status: string | null
  }

  export type InsurancePolicyCountAggregateOutputType = {
    id: number
    user_id: number
    vehicle_id: number
    policy_number: number
    type: number
    start_date: number
    end_date: number
    amount: number
    status: number
    _all: number
  }


  export type InsurancePolicyAvgAggregateInputType = {
    id?: true
    user_id?: true
    vehicle_id?: true
    amount?: true
  }

  export type InsurancePolicySumAggregateInputType = {
    id?: true
    user_id?: true
    vehicle_id?: true
    amount?: true
  }

  export type InsurancePolicyMinAggregateInputType = {
    id?: true
    user_id?: true
    vehicle_id?: true
    policy_number?: true
    type?: true
    start_date?: true
    end_date?: true
    amount?: true
    status?: true
  }

  export type InsurancePolicyMaxAggregateInputType = {
    id?: true
    user_id?: true
    vehicle_id?: true
    policy_number?: true
    type?: true
    start_date?: true
    end_date?: true
    amount?: true
    status?: true
  }

  export type InsurancePolicyCountAggregateInputType = {
    id?: true
    user_id?: true
    vehicle_id?: true
    policy_number?: true
    type?: true
    start_date?: true
    end_date?: true
    amount?: true
    status?: true
    _all?: true
  }

  export type InsurancePolicyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InsurancePolicy to aggregate.
     */
    where?: InsurancePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsurancePolicies to fetch.
     */
    orderBy?: InsurancePolicyOrderByWithRelationInput | InsurancePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InsurancePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsurancePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsurancePolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InsurancePolicies
    **/
    _count?: true | InsurancePolicyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InsurancePolicyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InsurancePolicySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InsurancePolicyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InsurancePolicyMaxAggregateInputType
  }

  export type GetInsurancePolicyAggregateType<T extends InsurancePolicyAggregateArgs> = {
        [P in keyof T & keyof AggregateInsurancePolicy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInsurancePolicy[P]>
      : GetScalarType<T[P], AggregateInsurancePolicy[P]>
  }




  export type InsurancePolicyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsurancePolicyWhereInput
    orderBy?: InsurancePolicyOrderByWithAggregationInput | InsurancePolicyOrderByWithAggregationInput[]
    by: InsurancePolicyScalarFieldEnum[] | InsurancePolicyScalarFieldEnum
    having?: InsurancePolicyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InsurancePolicyCountAggregateInputType | true
    _avg?: InsurancePolicyAvgAggregateInputType
    _sum?: InsurancePolicySumAggregateInputType
    _min?: InsurancePolicyMinAggregateInputType
    _max?: InsurancePolicyMaxAggregateInputType
  }

  export type InsurancePolicyGroupByOutputType = {
    id: number
    user_id: number
    vehicle_id: number
    policy_number: string
    type: string
    start_date: Date
    end_date: Date
    amount: number
    status: string
    _count: InsurancePolicyCountAggregateOutputType | null
    _avg: InsurancePolicyAvgAggregateOutputType | null
    _sum: InsurancePolicySumAggregateOutputType | null
    _min: InsurancePolicyMinAggregateOutputType | null
    _max: InsurancePolicyMaxAggregateOutputType | null
  }

  type GetInsurancePolicyGroupByPayload<T extends InsurancePolicyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InsurancePolicyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InsurancePolicyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InsurancePolicyGroupByOutputType[P]>
            : GetScalarType<T[P], InsurancePolicyGroupByOutputType[P]>
        }
      >
    >


  export type InsurancePolicySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    vehicle_id?: boolean
    policy_number?: boolean
    type?: boolean
    start_date?: boolean
    end_date?: boolean
    amount?: boolean
    status?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    vehicle?: boolean | VehicleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insurancePolicy"]>


  export type InsurancePolicySelectScalar = {
    id?: boolean
    user_id?: boolean
    vehicle_id?: boolean
    policy_number?: boolean
    type?: boolean
    start_date?: boolean
    end_date?: boolean
    amount?: boolean
    status?: boolean
  }

  export type InsurancePolicyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    vehicle?: boolean | VehicleDefaultArgs<ExtArgs>
  }

  export type $InsurancePolicyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InsurancePolicy"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      vehicle: Prisma.$VehiclePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      vehicle_id: number
      policy_number: string
      type: string
      start_date: Date
      end_date: Date
      amount: number
      status: string
    }, ExtArgs["result"]["insurancePolicy"]>
    composites: {}
  }

  type InsurancePolicyGetPayload<S extends boolean | null | undefined | InsurancePolicyDefaultArgs> = $Result.GetResult<Prisma.$InsurancePolicyPayload, S>

  type InsurancePolicyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InsurancePolicyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InsurancePolicyCountAggregateInputType | true
    }

  export interface InsurancePolicyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InsurancePolicy'], meta: { name: 'InsurancePolicy' } }
    /**
     * Find zero or one InsurancePolicy that matches the filter.
     * @param {InsurancePolicyFindUniqueArgs} args - Arguments to find a InsurancePolicy
     * @example
     * // Get one InsurancePolicy
     * const insurancePolicy = await prisma.insurancePolicy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InsurancePolicyFindUniqueArgs>(args: SelectSubset<T, InsurancePolicyFindUniqueArgs<ExtArgs>>): Prisma__InsurancePolicyClient<$Result.GetResult<Prisma.$InsurancePolicyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InsurancePolicy that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InsurancePolicyFindUniqueOrThrowArgs} args - Arguments to find a InsurancePolicy
     * @example
     * // Get one InsurancePolicy
     * const insurancePolicy = await prisma.insurancePolicy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InsurancePolicyFindUniqueOrThrowArgs>(args: SelectSubset<T, InsurancePolicyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InsurancePolicyClient<$Result.GetResult<Prisma.$InsurancePolicyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InsurancePolicy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsurancePolicyFindFirstArgs} args - Arguments to find a InsurancePolicy
     * @example
     * // Get one InsurancePolicy
     * const insurancePolicy = await prisma.insurancePolicy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InsurancePolicyFindFirstArgs>(args?: SelectSubset<T, InsurancePolicyFindFirstArgs<ExtArgs>>): Prisma__InsurancePolicyClient<$Result.GetResult<Prisma.$InsurancePolicyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InsurancePolicy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsurancePolicyFindFirstOrThrowArgs} args - Arguments to find a InsurancePolicy
     * @example
     * // Get one InsurancePolicy
     * const insurancePolicy = await prisma.insurancePolicy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InsurancePolicyFindFirstOrThrowArgs>(args?: SelectSubset<T, InsurancePolicyFindFirstOrThrowArgs<ExtArgs>>): Prisma__InsurancePolicyClient<$Result.GetResult<Prisma.$InsurancePolicyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InsurancePolicies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsurancePolicyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InsurancePolicies
     * const insurancePolicies = await prisma.insurancePolicy.findMany()
     * 
     * // Get first 10 InsurancePolicies
     * const insurancePolicies = await prisma.insurancePolicy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const insurancePolicyWithIdOnly = await prisma.insurancePolicy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InsurancePolicyFindManyArgs>(args?: SelectSubset<T, InsurancePolicyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsurancePolicyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InsurancePolicy.
     * @param {InsurancePolicyCreateArgs} args - Arguments to create a InsurancePolicy.
     * @example
     * // Create one InsurancePolicy
     * const InsurancePolicy = await prisma.insurancePolicy.create({
     *   data: {
     *     // ... data to create a InsurancePolicy
     *   }
     * })
     * 
     */
    create<T extends InsurancePolicyCreateArgs>(args: SelectSubset<T, InsurancePolicyCreateArgs<ExtArgs>>): Prisma__InsurancePolicyClient<$Result.GetResult<Prisma.$InsurancePolicyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InsurancePolicies.
     * @param {InsurancePolicyCreateManyArgs} args - Arguments to create many InsurancePolicies.
     * @example
     * // Create many InsurancePolicies
     * const insurancePolicy = await prisma.insurancePolicy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InsurancePolicyCreateManyArgs>(args?: SelectSubset<T, InsurancePolicyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InsurancePolicy.
     * @param {InsurancePolicyDeleteArgs} args - Arguments to delete one InsurancePolicy.
     * @example
     * // Delete one InsurancePolicy
     * const InsurancePolicy = await prisma.insurancePolicy.delete({
     *   where: {
     *     // ... filter to delete one InsurancePolicy
     *   }
     * })
     * 
     */
    delete<T extends InsurancePolicyDeleteArgs>(args: SelectSubset<T, InsurancePolicyDeleteArgs<ExtArgs>>): Prisma__InsurancePolicyClient<$Result.GetResult<Prisma.$InsurancePolicyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InsurancePolicy.
     * @param {InsurancePolicyUpdateArgs} args - Arguments to update one InsurancePolicy.
     * @example
     * // Update one InsurancePolicy
     * const insurancePolicy = await prisma.insurancePolicy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InsurancePolicyUpdateArgs>(args: SelectSubset<T, InsurancePolicyUpdateArgs<ExtArgs>>): Prisma__InsurancePolicyClient<$Result.GetResult<Prisma.$InsurancePolicyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InsurancePolicies.
     * @param {InsurancePolicyDeleteManyArgs} args - Arguments to filter InsurancePolicies to delete.
     * @example
     * // Delete a few InsurancePolicies
     * const { count } = await prisma.insurancePolicy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InsurancePolicyDeleteManyArgs>(args?: SelectSubset<T, InsurancePolicyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InsurancePolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsurancePolicyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InsurancePolicies
     * const insurancePolicy = await prisma.insurancePolicy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InsurancePolicyUpdateManyArgs>(args: SelectSubset<T, InsurancePolicyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InsurancePolicy.
     * @param {InsurancePolicyUpsertArgs} args - Arguments to update or create a InsurancePolicy.
     * @example
     * // Update or create a InsurancePolicy
     * const insurancePolicy = await prisma.insurancePolicy.upsert({
     *   create: {
     *     // ... data to create a InsurancePolicy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InsurancePolicy we want to update
     *   }
     * })
     */
    upsert<T extends InsurancePolicyUpsertArgs>(args: SelectSubset<T, InsurancePolicyUpsertArgs<ExtArgs>>): Prisma__InsurancePolicyClient<$Result.GetResult<Prisma.$InsurancePolicyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InsurancePolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsurancePolicyCountArgs} args - Arguments to filter InsurancePolicies to count.
     * @example
     * // Count the number of InsurancePolicies
     * const count = await prisma.insurancePolicy.count({
     *   where: {
     *     // ... the filter for the InsurancePolicies we want to count
     *   }
     * })
    **/
    count<T extends InsurancePolicyCountArgs>(
      args?: Subset<T, InsurancePolicyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InsurancePolicyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InsurancePolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsurancePolicyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InsurancePolicyAggregateArgs>(args: Subset<T, InsurancePolicyAggregateArgs>): Prisma.PrismaPromise<GetInsurancePolicyAggregateType<T>>

    /**
     * Group by InsurancePolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsurancePolicyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InsurancePolicyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InsurancePolicyGroupByArgs['orderBy'] }
        : { orderBy?: InsurancePolicyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InsurancePolicyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInsurancePolicyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InsurancePolicy model
   */
  readonly fields: InsurancePolicyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InsurancePolicy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InsurancePolicyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    vehicle<T extends VehicleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VehicleDefaultArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InsurancePolicy model
   */ 
  interface InsurancePolicyFieldRefs {
    readonly id: FieldRef<"InsurancePolicy", 'Int'>
    readonly user_id: FieldRef<"InsurancePolicy", 'Int'>
    readonly vehicle_id: FieldRef<"InsurancePolicy", 'Int'>
    readonly policy_number: FieldRef<"InsurancePolicy", 'String'>
    readonly type: FieldRef<"InsurancePolicy", 'String'>
    readonly start_date: FieldRef<"InsurancePolicy", 'DateTime'>
    readonly end_date: FieldRef<"InsurancePolicy", 'DateTime'>
    readonly amount: FieldRef<"InsurancePolicy", 'Float'>
    readonly status: FieldRef<"InsurancePolicy", 'String'>
  }
    

  // Custom InputTypes
  /**
   * InsurancePolicy findUnique
   */
  export type InsurancePolicyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsurancePolicy
     */
    select?: InsurancePolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsurancePolicyInclude<ExtArgs> | null
    /**
     * Filter, which InsurancePolicy to fetch.
     */
    where: InsurancePolicyWhereUniqueInput
  }

  /**
   * InsurancePolicy findUniqueOrThrow
   */
  export type InsurancePolicyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsurancePolicy
     */
    select?: InsurancePolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsurancePolicyInclude<ExtArgs> | null
    /**
     * Filter, which InsurancePolicy to fetch.
     */
    where: InsurancePolicyWhereUniqueInput
  }

  /**
   * InsurancePolicy findFirst
   */
  export type InsurancePolicyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsurancePolicy
     */
    select?: InsurancePolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsurancePolicyInclude<ExtArgs> | null
    /**
     * Filter, which InsurancePolicy to fetch.
     */
    where?: InsurancePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsurancePolicies to fetch.
     */
    orderBy?: InsurancePolicyOrderByWithRelationInput | InsurancePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InsurancePolicies.
     */
    cursor?: InsurancePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsurancePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsurancePolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InsurancePolicies.
     */
    distinct?: InsurancePolicyScalarFieldEnum | InsurancePolicyScalarFieldEnum[]
  }

  /**
   * InsurancePolicy findFirstOrThrow
   */
  export type InsurancePolicyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsurancePolicy
     */
    select?: InsurancePolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsurancePolicyInclude<ExtArgs> | null
    /**
     * Filter, which InsurancePolicy to fetch.
     */
    where?: InsurancePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsurancePolicies to fetch.
     */
    orderBy?: InsurancePolicyOrderByWithRelationInput | InsurancePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InsurancePolicies.
     */
    cursor?: InsurancePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsurancePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsurancePolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InsurancePolicies.
     */
    distinct?: InsurancePolicyScalarFieldEnum | InsurancePolicyScalarFieldEnum[]
  }

  /**
   * InsurancePolicy findMany
   */
  export type InsurancePolicyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsurancePolicy
     */
    select?: InsurancePolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsurancePolicyInclude<ExtArgs> | null
    /**
     * Filter, which InsurancePolicies to fetch.
     */
    where?: InsurancePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsurancePolicies to fetch.
     */
    orderBy?: InsurancePolicyOrderByWithRelationInput | InsurancePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InsurancePolicies.
     */
    cursor?: InsurancePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsurancePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsurancePolicies.
     */
    skip?: number
    distinct?: InsurancePolicyScalarFieldEnum | InsurancePolicyScalarFieldEnum[]
  }

  /**
   * InsurancePolicy create
   */
  export type InsurancePolicyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsurancePolicy
     */
    select?: InsurancePolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsurancePolicyInclude<ExtArgs> | null
    /**
     * The data needed to create a InsurancePolicy.
     */
    data: XOR<InsurancePolicyCreateInput, InsurancePolicyUncheckedCreateInput>
  }

  /**
   * InsurancePolicy createMany
   */
  export type InsurancePolicyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InsurancePolicies.
     */
    data: InsurancePolicyCreateManyInput | InsurancePolicyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InsurancePolicy update
   */
  export type InsurancePolicyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsurancePolicy
     */
    select?: InsurancePolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsurancePolicyInclude<ExtArgs> | null
    /**
     * The data needed to update a InsurancePolicy.
     */
    data: XOR<InsurancePolicyUpdateInput, InsurancePolicyUncheckedUpdateInput>
    /**
     * Choose, which InsurancePolicy to update.
     */
    where: InsurancePolicyWhereUniqueInput
  }

  /**
   * InsurancePolicy updateMany
   */
  export type InsurancePolicyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InsurancePolicies.
     */
    data: XOR<InsurancePolicyUpdateManyMutationInput, InsurancePolicyUncheckedUpdateManyInput>
    /**
     * Filter which InsurancePolicies to update
     */
    where?: InsurancePolicyWhereInput
  }

  /**
   * InsurancePolicy upsert
   */
  export type InsurancePolicyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsurancePolicy
     */
    select?: InsurancePolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsurancePolicyInclude<ExtArgs> | null
    /**
     * The filter to search for the InsurancePolicy to update in case it exists.
     */
    where: InsurancePolicyWhereUniqueInput
    /**
     * In case the InsurancePolicy found by the `where` argument doesn't exist, create a new InsurancePolicy with this data.
     */
    create: XOR<InsurancePolicyCreateInput, InsurancePolicyUncheckedCreateInput>
    /**
     * In case the InsurancePolicy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InsurancePolicyUpdateInput, InsurancePolicyUncheckedUpdateInput>
  }

  /**
   * InsurancePolicy delete
   */
  export type InsurancePolicyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsurancePolicy
     */
    select?: InsurancePolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsurancePolicyInclude<ExtArgs> | null
    /**
     * Filter which InsurancePolicy to delete.
     */
    where: InsurancePolicyWhereUniqueInput
  }

  /**
   * InsurancePolicy deleteMany
   */
  export type InsurancePolicyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InsurancePolicies to delete
     */
    where?: InsurancePolicyWhereInput
  }

  /**
   * InsurancePolicy without action
   */
  export type InsurancePolicyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsurancePolicy
     */
    select?: InsurancePolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsurancePolicyInclude<ExtArgs> | null
  }


  /**
   * Model Vehicle
   */

  export type AggregateVehicle = {
    _count: VehicleCountAggregateOutputType | null
    _avg: VehicleAvgAggregateOutputType | null
    _sum: VehicleSumAggregateOutputType | null
    _min: VehicleMinAggregateOutputType | null
    _max: VehicleMaxAggregateOutputType | null
  }

  export type VehicleAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    year: number | null
  }

  export type VehicleSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    year: number | null
  }

  export type VehicleMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    make: string | null
    model: string | null
    year: number | null
    license_plate: string | null
    vin_number: string | null
  }

  export type VehicleMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    make: string | null
    model: string | null
    year: number | null
    license_plate: string | null
    vin_number: string | null
  }

  export type VehicleCountAggregateOutputType = {
    id: number
    user_id: number
    make: number
    model: number
    year: number
    license_plate: number
    vin_number: number
    _all: number
  }


  export type VehicleAvgAggregateInputType = {
    id?: true
    user_id?: true
    year?: true
  }

  export type VehicleSumAggregateInputType = {
    id?: true
    user_id?: true
    year?: true
  }

  export type VehicleMinAggregateInputType = {
    id?: true
    user_id?: true
    make?: true
    model?: true
    year?: true
    license_plate?: true
    vin_number?: true
  }

  export type VehicleMaxAggregateInputType = {
    id?: true
    user_id?: true
    make?: true
    model?: true
    year?: true
    license_plate?: true
    vin_number?: true
  }

  export type VehicleCountAggregateInputType = {
    id?: true
    user_id?: true
    make?: true
    model?: true
    year?: true
    license_plate?: true
    vin_number?: true
    _all?: true
  }

  export type VehicleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vehicle to aggregate.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vehicles
    **/
    _count?: true | VehicleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VehicleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VehicleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VehicleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VehicleMaxAggregateInputType
  }

  export type GetVehicleAggregateType<T extends VehicleAggregateArgs> = {
        [P in keyof T & keyof AggregateVehicle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVehicle[P]>
      : GetScalarType<T[P], AggregateVehicle[P]>
  }




  export type VehicleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehicleWhereInput
    orderBy?: VehicleOrderByWithAggregationInput | VehicleOrderByWithAggregationInput[]
    by: VehicleScalarFieldEnum[] | VehicleScalarFieldEnum
    having?: VehicleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VehicleCountAggregateInputType | true
    _avg?: VehicleAvgAggregateInputType
    _sum?: VehicleSumAggregateInputType
    _min?: VehicleMinAggregateInputType
    _max?: VehicleMaxAggregateInputType
  }

  export type VehicleGroupByOutputType = {
    id: number
    user_id: number
    make: string
    model: string
    year: number
    license_plate: string
    vin_number: string
    _count: VehicleCountAggregateOutputType | null
    _avg: VehicleAvgAggregateOutputType | null
    _sum: VehicleSumAggregateOutputType | null
    _min: VehicleMinAggregateOutputType | null
    _max: VehicleMaxAggregateOutputType | null
  }

  type GetVehicleGroupByPayload<T extends VehicleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VehicleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VehicleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VehicleGroupByOutputType[P]>
            : GetScalarType<T[P], VehicleGroupByOutputType[P]>
        }
      >
    >


  export type VehicleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    make?: boolean
    model?: boolean
    year?: boolean
    license_plate?: boolean
    vin_number?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    insurancePolicies?: boolean | Vehicle$insurancePoliciesArgs<ExtArgs>
    accidents?: boolean | Vehicle$accidentsArgs<ExtArgs>
    AccidentVehicle?: boolean | Vehicle$AccidentVehicleArgs<ExtArgs>
    _count?: boolean | VehicleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vehicle"]>


  export type VehicleSelectScalar = {
    id?: boolean
    user_id?: boolean
    make?: boolean
    model?: boolean
    year?: boolean
    license_plate?: boolean
    vin_number?: boolean
  }

  export type VehicleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    insurancePolicies?: boolean | Vehicle$insurancePoliciesArgs<ExtArgs>
    accidents?: boolean | Vehicle$accidentsArgs<ExtArgs>
    AccidentVehicle?: boolean | Vehicle$AccidentVehicleArgs<ExtArgs>
    _count?: boolean | VehicleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $VehiclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vehicle"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      insurancePolicies: Prisma.$InsurancePolicyPayload<ExtArgs>[]
      accidents: Prisma.$AccidentPayload<ExtArgs>[]
      AccidentVehicle: Prisma.$AccidentVehiclePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      make: string
      model: string
      year: number
      license_plate: string
      vin_number: string
    }, ExtArgs["result"]["vehicle"]>
    composites: {}
  }

  type VehicleGetPayload<S extends boolean | null | undefined | VehicleDefaultArgs> = $Result.GetResult<Prisma.$VehiclePayload, S>

  type VehicleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VehicleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VehicleCountAggregateInputType | true
    }

  export interface VehicleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vehicle'], meta: { name: 'Vehicle' } }
    /**
     * Find zero or one Vehicle that matches the filter.
     * @param {VehicleFindUniqueArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VehicleFindUniqueArgs>(args: SelectSubset<T, VehicleFindUniqueArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Vehicle that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VehicleFindUniqueOrThrowArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VehicleFindUniqueOrThrowArgs>(args: SelectSubset<T, VehicleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Vehicle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleFindFirstArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VehicleFindFirstArgs>(args?: SelectSubset<T, VehicleFindFirstArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Vehicle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleFindFirstOrThrowArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VehicleFindFirstOrThrowArgs>(args?: SelectSubset<T, VehicleFindFirstOrThrowArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Vehicles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vehicles
     * const vehicles = await prisma.vehicle.findMany()
     * 
     * // Get first 10 Vehicles
     * const vehicles = await prisma.vehicle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vehicleWithIdOnly = await prisma.vehicle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VehicleFindManyArgs>(args?: SelectSubset<T, VehicleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Vehicle.
     * @param {VehicleCreateArgs} args - Arguments to create a Vehicle.
     * @example
     * // Create one Vehicle
     * const Vehicle = await prisma.vehicle.create({
     *   data: {
     *     // ... data to create a Vehicle
     *   }
     * })
     * 
     */
    create<T extends VehicleCreateArgs>(args: SelectSubset<T, VehicleCreateArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Vehicles.
     * @param {VehicleCreateManyArgs} args - Arguments to create many Vehicles.
     * @example
     * // Create many Vehicles
     * const vehicle = await prisma.vehicle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VehicleCreateManyArgs>(args?: SelectSubset<T, VehicleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vehicle.
     * @param {VehicleDeleteArgs} args - Arguments to delete one Vehicle.
     * @example
     * // Delete one Vehicle
     * const Vehicle = await prisma.vehicle.delete({
     *   where: {
     *     // ... filter to delete one Vehicle
     *   }
     * })
     * 
     */
    delete<T extends VehicleDeleteArgs>(args: SelectSubset<T, VehicleDeleteArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Vehicle.
     * @param {VehicleUpdateArgs} args - Arguments to update one Vehicle.
     * @example
     * // Update one Vehicle
     * const vehicle = await prisma.vehicle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VehicleUpdateArgs>(args: SelectSubset<T, VehicleUpdateArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Vehicles.
     * @param {VehicleDeleteManyArgs} args - Arguments to filter Vehicles to delete.
     * @example
     * // Delete a few Vehicles
     * const { count } = await prisma.vehicle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VehicleDeleteManyArgs>(args?: SelectSubset<T, VehicleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vehicles
     * const vehicle = await prisma.vehicle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VehicleUpdateManyArgs>(args: SelectSubset<T, VehicleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vehicle.
     * @param {VehicleUpsertArgs} args - Arguments to update or create a Vehicle.
     * @example
     * // Update or create a Vehicle
     * const vehicle = await prisma.vehicle.upsert({
     *   create: {
     *     // ... data to create a Vehicle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vehicle we want to update
     *   }
     * })
     */
    upsert<T extends VehicleUpsertArgs>(args: SelectSubset<T, VehicleUpsertArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Vehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleCountArgs} args - Arguments to filter Vehicles to count.
     * @example
     * // Count the number of Vehicles
     * const count = await prisma.vehicle.count({
     *   where: {
     *     // ... the filter for the Vehicles we want to count
     *   }
     * })
    **/
    count<T extends VehicleCountArgs>(
      args?: Subset<T, VehicleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VehicleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VehicleAggregateArgs>(args: Subset<T, VehicleAggregateArgs>): Prisma.PrismaPromise<GetVehicleAggregateType<T>>

    /**
     * Group by Vehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VehicleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VehicleGroupByArgs['orderBy'] }
        : { orderBy?: VehicleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VehicleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVehicleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vehicle model
   */
  readonly fields: VehicleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vehicle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VehicleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    insurancePolicies<T extends Vehicle$insurancePoliciesArgs<ExtArgs> = {}>(args?: Subset<T, Vehicle$insurancePoliciesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsurancePolicyPayload<ExtArgs>, T, "findMany"> | Null>
    accidents<T extends Vehicle$accidentsArgs<ExtArgs> = {}>(args?: Subset<T, Vehicle$accidentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccidentPayload<ExtArgs>, T, "findMany"> | Null>
    AccidentVehicle<T extends Vehicle$AccidentVehicleArgs<ExtArgs> = {}>(args?: Subset<T, Vehicle$AccidentVehicleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccidentVehiclePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vehicle model
   */ 
  interface VehicleFieldRefs {
    readonly id: FieldRef<"Vehicle", 'Int'>
    readonly user_id: FieldRef<"Vehicle", 'Int'>
    readonly make: FieldRef<"Vehicle", 'String'>
    readonly model: FieldRef<"Vehicle", 'String'>
    readonly year: FieldRef<"Vehicle", 'Int'>
    readonly license_plate: FieldRef<"Vehicle", 'String'>
    readonly vin_number: FieldRef<"Vehicle", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Vehicle findUnique
   */
  export type VehicleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle findUniqueOrThrow
   */
  export type VehicleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle findFirst
   */
  export type VehicleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vehicles.
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vehicles.
     */
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Vehicle findFirstOrThrow
   */
  export type VehicleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vehicles.
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vehicles.
     */
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Vehicle findMany
   */
  export type VehicleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicles to fetch.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vehicles.
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Vehicle create
   */
  export type VehicleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * The data needed to create a Vehicle.
     */
    data: XOR<VehicleCreateInput, VehicleUncheckedCreateInput>
  }

  /**
   * Vehicle createMany
   */
  export type VehicleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vehicles.
     */
    data: VehicleCreateManyInput | VehicleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vehicle update
   */
  export type VehicleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * The data needed to update a Vehicle.
     */
    data: XOR<VehicleUpdateInput, VehicleUncheckedUpdateInput>
    /**
     * Choose, which Vehicle to update.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle updateMany
   */
  export type VehicleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vehicles.
     */
    data: XOR<VehicleUpdateManyMutationInput, VehicleUncheckedUpdateManyInput>
    /**
     * Filter which Vehicles to update
     */
    where?: VehicleWhereInput
  }

  /**
   * Vehicle upsert
   */
  export type VehicleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * The filter to search for the Vehicle to update in case it exists.
     */
    where: VehicleWhereUniqueInput
    /**
     * In case the Vehicle found by the `where` argument doesn't exist, create a new Vehicle with this data.
     */
    create: XOR<VehicleCreateInput, VehicleUncheckedCreateInput>
    /**
     * In case the Vehicle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VehicleUpdateInput, VehicleUncheckedUpdateInput>
  }

  /**
   * Vehicle delete
   */
  export type VehicleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter which Vehicle to delete.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle deleteMany
   */
  export type VehicleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vehicles to delete
     */
    where?: VehicleWhereInput
  }

  /**
   * Vehicle.insurancePolicies
   */
  export type Vehicle$insurancePoliciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsurancePolicy
     */
    select?: InsurancePolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsurancePolicyInclude<ExtArgs> | null
    where?: InsurancePolicyWhereInput
    orderBy?: InsurancePolicyOrderByWithRelationInput | InsurancePolicyOrderByWithRelationInput[]
    cursor?: InsurancePolicyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InsurancePolicyScalarFieldEnum | InsurancePolicyScalarFieldEnum[]
  }

  /**
   * Vehicle.accidents
   */
  export type Vehicle$accidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accident
     */
    select?: AccidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInclude<ExtArgs> | null
    where?: AccidentWhereInput
    orderBy?: AccidentOrderByWithRelationInput | AccidentOrderByWithRelationInput[]
    cursor?: AccidentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccidentScalarFieldEnum | AccidentScalarFieldEnum[]
  }

  /**
   * Vehicle.AccidentVehicle
   */
  export type Vehicle$AccidentVehicleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentVehicle
     */
    select?: AccidentVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentVehicleInclude<ExtArgs> | null
    where?: AccidentVehicleWhereInput
    orderBy?: AccidentVehicleOrderByWithRelationInput | AccidentVehicleOrderByWithRelationInput[]
    cursor?: AccidentVehicleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccidentVehicleScalarFieldEnum | AccidentVehicleScalarFieldEnum[]
  }

  /**
   * Vehicle without action
   */
  export type VehicleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
  }


  /**
   * Model Accident
   */

  export type AggregateAccident = {
    _count: AccidentCountAggregateOutputType | null
    _avg: AccidentAvgAggregateOutputType | null
    _sum: AccidentSumAggregateOutputType | null
    _min: AccidentMinAggregateOutputType | null
    _max: AccidentMaxAggregateOutputType | null
  }

  export type AccidentAvgAggregateOutputType = {
    id: number | null
  }

  export type AccidentSumAggregateOutputType = {
    id: number | null
  }

  export type AccidentMinAggregateOutputType = {
    id: number | null
    date: Date | null
    location: string | null
    description: string | null
  }

  export type AccidentMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    location: string | null
    description: string | null
  }

  export type AccidentCountAggregateOutputType = {
    id: number
    date: number
    location: number
    description: number
    _all: number
  }


  export type AccidentAvgAggregateInputType = {
    id?: true
  }

  export type AccidentSumAggregateInputType = {
    id?: true
  }

  export type AccidentMinAggregateInputType = {
    id?: true
    date?: true
    location?: true
    description?: true
  }

  export type AccidentMaxAggregateInputType = {
    id?: true
    date?: true
    location?: true
    description?: true
  }

  export type AccidentCountAggregateInputType = {
    id?: true
    date?: true
    location?: true
    description?: true
    _all?: true
  }

  export type AccidentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accident to aggregate.
     */
    where?: AccidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accidents to fetch.
     */
    orderBy?: AccidentOrderByWithRelationInput | AccidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accidents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accidents
    **/
    _count?: true | AccidentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccidentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccidentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccidentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccidentMaxAggregateInputType
  }

  export type GetAccidentAggregateType<T extends AccidentAggregateArgs> = {
        [P in keyof T & keyof AggregateAccident]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccident[P]>
      : GetScalarType<T[P], AggregateAccident[P]>
  }




  export type AccidentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccidentWhereInput
    orderBy?: AccidentOrderByWithAggregationInput | AccidentOrderByWithAggregationInput[]
    by: AccidentScalarFieldEnum[] | AccidentScalarFieldEnum
    having?: AccidentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccidentCountAggregateInputType | true
    _avg?: AccidentAvgAggregateInputType
    _sum?: AccidentSumAggregateInputType
    _min?: AccidentMinAggregateInputType
    _max?: AccidentMaxAggregateInputType
  }

  export type AccidentGroupByOutputType = {
    id: number
    date: Date
    location: string
    description: string
    _count: AccidentCountAggregateOutputType | null
    _avg: AccidentAvgAggregateOutputType | null
    _sum: AccidentSumAggregateOutputType | null
    _min: AccidentMinAggregateOutputType | null
    _max: AccidentMaxAggregateOutputType | null
  }

  type GetAccidentGroupByPayload<T extends AccidentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccidentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccidentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccidentGroupByOutputType[P]>
            : GetScalarType<T[P], AccidentGroupByOutputType[P]>
        }
      >
    >


  export type AccidentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    location?: boolean
    description?: boolean
    claims?: boolean | Accident$claimsArgs<ExtArgs>
    vehicles?: boolean | Accident$vehiclesArgs<ExtArgs>
    AccidentVehicle?: boolean | Accident$AccidentVehicleArgs<ExtArgs>
    _count?: boolean | AccidentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accident"]>


  export type AccidentSelectScalar = {
    id?: boolean
    date?: boolean
    location?: boolean
    description?: boolean
  }

  export type AccidentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    claims?: boolean | Accident$claimsArgs<ExtArgs>
    vehicles?: boolean | Accident$vehiclesArgs<ExtArgs>
    AccidentVehicle?: boolean | Accident$AccidentVehicleArgs<ExtArgs>
    _count?: boolean | AccidentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AccidentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Accident"
    objects: {
      claims: Prisma.$ClaimPayload<ExtArgs>[]
      vehicles: Prisma.$VehiclePayload<ExtArgs>[]
      AccidentVehicle: Prisma.$AccidentVehiclePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      location: string
      description: string
    }, ExtArgs["result"]["accident"]>
    composites: {}
  }

  type AccidentGetPayload<S extends boolean | null | undefined | AccidentDefaultArgs> = $Result.GetResult<Prisma.$AccidentPayload, S>

  type AccidentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccidentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccidentCountAggregateInputType | true
    }

  export interface AccidentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Accident'], meta: { name: 'Accident' } }
    /**
     * Find zero or one Accident that matches the filter.
     * @param {AccidentFindUniqueArgs} args - Arguments to find a Accident
     * @example
     * // Get one Accident
     * const accident = await prisma.accident.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccidentFindUniqueArgs>(args: SelectSubset<T, AccidentFindUniqueArgs<ExtArgs>>): Prisma__AccidentClient<$Result.GetResult<Prisma.$AccidentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Accident that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccidentFindUniqueOrThrowArgs} args - Arguments to find a Accident
     * @example
     * // Get one Accident
     * const accident = await prisma.accident.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccidentFindUniqueOrThrowArgs>(args: SelectSubset<T, AccidentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccidentClient<$Result.GetResult<Prisma.$AccidentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Accident that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentFindFirstArgs} args - Arguments to find a Accident
     * @example
     * // Get one Accident
     * const accident = await prisma.accident.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccidentFindFirstArgs>(args?: SelectSubset<T, AccidentFindFirstArgs<ExtArgs>>): Prisma__AccidentClient<$Result.GetResult<Prisma.$AccidentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Accident that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentFindFirstOrThrowArgs} args - Arguments to find a Accident
     * @example
     * // Get one Accident
     * const accident = await prisma.accident.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccidentFindFirstOrThrowArgs>(args?: SelectSubset<T, AccidentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccidentClient<$Result.GetResult<Prisma.$AccidentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Accidents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accidents
     * const accidents = await prisma.accident.findMany()
     * 
     * // Get first 10 Accidents
     * const accidents = await prisma.accident.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accidentWithIdOnly = await prisma.accident.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccidentFindManyArgs>(args?: SelectSubset<T, AccidentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccidentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Accident.
     * @param {AccidentCreateArgs} args - Arguments to create a Accident.
     * @example
     * // Create one Accident
     * const Accident = await prisma.accident.create({
     *   data: {
     *     // ... data to create a Accident
     *   }
     * })
     * 
     */
    create<T extends AccidentCreateArgs>(args: SelectSubset<T, AccidentCreateArgs<ExtArgs>>): Prisma__AccidentClient<$Result.GetResult<Prisma.$AccidentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Accidents.
     * @param {AccidentCreateManyArgs} args - Arguments to create many Accidents.
     * @example
     * // Create many Accidents
     * const accident = await prisma.accident.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccidentCreateManyArgs>(args?: SelectSubset<T, AccidentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Accident.
     * @param {AccidentDeleteArgs} args - Arguments to delete one Accident.
     * @example
     * // Delete one Accident
     * const Accident = await prisma.accident.delete({
     *   where: {
     *     // ... filter to delete one Accident
     *   }
     * })
     * 
     */
    delete<T extends AccidentDeleteArgs>(args: SelectSubset<T, AccidentDeleteArgs<ExtArgs>>): Prisma__AccidentClient<$Result.GetResult<Prisma.$AccidentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Accident.
     * @param {AccidentUpdateArgs} args - Arguments to update one Accident.
     * @example
     * // Update one Accident
     * const accident = await prisma.accident.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccidentUpdateArgs>(args: SelectSubset<T, AccidentUpdateArgs<ExtArgs>>): Prisma__AccidentClient<$Result.GetResult<Prisma.$AccidentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Accidents.
     * @param {AccidentDeleteManyArgs} args - Arguments to filter Accidents to delete.
     * @example
     * // Delete a few Accidents
     * const { count } = await prisma.accident.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccidentDeleteManyArgs>(args?: SelectSubset<T, AccidentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accidents
     * const accident = await prisma.accident.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccidentUpdateManyArgs>(args: SelectSubset<T, AccidentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Accident.
     * @param {AccidentUpsertArgs} args - Arguments to update or create a Accident.
     * @example
     * // Update or create a Accident
     * const accident = await prisma.accident.upsert({
     *   create: {
     *     // ... data to create a Accident
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Accident we want to update
     *   }
     * })
     */
    upsert<T extends AccidentUpsertArgs>(args: SelectSubset<T, AccidentUpsertArgs<ExtArgs>>): Prisma__AccidentClient<$Result.GetResult<Prisma.$AccidentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Accidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentCountArgs} args - Arguments to filter Accidents to count.
     * @example
     * // Count the number of Accidents
     * const count = await prisma.accident.count({
     *   where: {
     *     // ... the filter for the Accidents we want to count
     *   }
     * })
    **/
    count<T extends AccidentCountArgs>(
      args?: Subset<T, AccidentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccidentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Accident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccidentAggregateArgs>(args: Subset<T, AccidentAggregateArgs>): Prisma.PrismaPromise<GetAccidentAggregateType<T>>

    /**
     * Group by Accident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccidentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccidentGroupByArgs['orderBy'] }
        : { orderBy?: AccidentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccidentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccidentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Accident model
   */
  readonly fields: AccidentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Accident.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccidentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    claims<T extends Accident$claimsArgs<ExtArgs> = {}>(args?: Subset<T, Accident$claimsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClaimPayload<ExtArgs>, T, "findMany"> | Null>
    vehicles<T extends Accident$vehiclesArgs<ExtArgs> = {}>(args?: Subset<T, Accident$vehiclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findMany"> | Null>
    AccidentVehicle<T extends Accident$AccidentVehicleArgs<ExtArgs> = {}>(args?: Subset<T, Accident$AccidentVehicleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccidentVehiclePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Accident model
   */ 
  interface AccidentFieldRefs {
    readonly id: FieldRef<"Accident", 'Int'>
    readonly date: FieldRef<"Accident", 'DateTime'>
    readonly location: FieldRef<"Accident", 'String'>
    readonly description: FieldRef<"Accident", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Accident findUnique
   */
  export type AccidentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accident
     */
    select?: AccidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInclude<ExtArgs> | null
    /**
     * Filter, which Accident to fetch.
     */
    where: AccidentWhereUniqueInput
  }

  /**
   * Accident findUniqueOrThrow
   */
  export type AccidentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accident
     */
    select?: AccidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInclude<ExtArgs> | null
    /**
     * Filter, which Accident to fetch.
     */
    where: AccidentWhereUniqueInput
  }

  /**
   * Accident findFirst
   */
  export type AccidentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accident
     */
    select?: AccidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInclude<ExtArgs> | null
    /**
     * Filter, which Accident to fetch.
     */
    where?: AccidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accidents to fetch.
     */
    orderBy?: AccidentOrderByWithRelationInput | AccidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accidents.
     */
    cursor?: AccidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accidents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accidents.
     */
    distinct?: AccidentScalarFieldEnum | AccidentScalarFieldEnum[]
  }

  /**
   * Accident findFirstOrThrow
   */
  export type AccidentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accident
     */
    select?: AccidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInclude<ExtArgs> | null
    /**
     * Filter, which Accident to fetch.
     */
    where?: AccidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accidents to fetch.
     */
    orderBy?: AccidentOrderByWithRelationInput | AccidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accidents.
     */
    cursor?: AccidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accidents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accidents.
     */
    distinct?: AccidentScalarFieldEnum | AccidentScalarFieldEnum[]
  }

  /**
   * Accident findMany
   */
  export type AccidentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accident
     */
    select?: AccidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInclude<ExtArgs> | null
    /**
     * Filter, which Accidents to fetch.
     */
    where?: AccidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accidents to fetch.
     */
    orderBy?: AccidentOrderByWithRelationInput | AccidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accidents.
     */
    cursor?: AccidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accidents.
     */
    skip?: number
    distinct?: AccidentScalarFieldEnum | AccidentScalarFieldEnum[]
  }

  /**
   * Accident create
   */
  export type AccidentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accident
     */
    select?: AccidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInclude<ExtArgs> | null
    /**
     * The data needed to create a Accident.
     */
    data: XOR<AccidentCreateInput, AccidentUncheckedCreateInput>
  }

  /**
   * Accident createMany
   */
  export type AccidentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accidents.
     */
    data: AccidentCreateManyInput | AccidentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Accident update
   */
  export type AccidentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accident
     */
    select?: AccidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInclude<ExtArgs> | null
    /**
     * The data needed to update a Accident.
     */
    data: XOR<AccidentUpdateInput, AccidentUncheckedUpdateInput>
    /**
     * Choose, which Accident to update.
     */
    where: AccidentWhereUniqueInput
  }

  /**
   * Accident updateMany
   */
  export type AccidentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accidents.
     */
    data: XOR<AccidentUpdateManyMutationInput, AccidentUncheckedUpdateManyInput>
    /**
     * Filter which Accidents to update
     */
    where?: AccidentWhereInput
  }

  /**
   * Accident upsert
   */
  export type AccidentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accident
     */
    select?: AccidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInclude<ExtArgs> | null
    /**
     * The filter to search for the Accident to update in case it exists.
     */
    where: AccidentWhereUniqueInput
    /**
     * In case the Accident found by the `where` argument doesn't exist, create a new Accident with this data.
     */
    create: XOR<AccidentCreateInput, AccidentUncheckedCreateInput>
    /**
     * In case the Accident was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccidentUpdateInput, AccidentUncheckedUpdateInput>
  }

  /**
   * Accident delete
   */
  export type AccidentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accident
     */
    select?: AccidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInclude<ExtArgs> | null
    /**
     * Filter which Accident to delete.
     */
    where: AccidentWhereUniqueInput
  }

  /**
   * Accident deleteMany
   */
  export type AccidentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accidents to delete
     */
    where?: AccidentWhereInput
  }

  /**
   * Accident.claims
   */
  export type Accident$claimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaimInclude<ExtArgs> | null
    where?: ClaimWhereInput
    orderBy?: ClaimOrderByWithRelationInput | ClaimOrderByWithRelationInput[]
    cursor?: ClaimWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClaimScalarFieldEnum | ClaimScalarFieldEnum[]
  }

  /**
   * Accident.vehicles
   */
  export type Accident$vehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    where?: VehicleWhereInput
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    cursor?: VehicleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Accident.AccidentVehicle
   */
  export type Accident$AccidentVehicleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentVehicle
     */
    select?: AccidentVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentVehicleInclude<ExtArgs> | null
    where?: AccidentVehicleWhereInput
    orderBy?: AccidentVehicleOrderByWithRelationInput | AccidentVehicleOrderByWithRelationInput[]
    cursor?: AccidentVehicleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccidentVehicleScalarFieldEnum | AccidentVehicleScalarFieldEnum[]
  }

  /**
   * Accident without action
   */
  export type AccidentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accident
     */
    select?: AccidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInclude<ExtArgs> | null
  }


  /**
   * Model Claim
   */

  export type AggregateClaim = {
    _count: ClaimCountAggregateOutputType | null
    _avg: ClaimAvgAggregateOutputType | null
    _sum: ClaimSumAggregateOutputType | null
    _min: ClaimMinAggregateOutputType | null
    _max: ClaimMaxAggregateOutputType | null
  }

  export type ClaimAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    accident_id: number | null
    amount_claimed: number | null
  }

  export type ClaimSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    accident_id: number | null
    amount_claimed: number | null
  }

  export type ClaimMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    accident_id: number | null
    claim_number: string | null
    date_submitted: Date | null
    status: string | null
    description: string | null
    amount_claimed: number | null
  }

  export type ClaimMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    accident_id: number | null
    claim_number: string | null
    date_submitted: Date | null
    status: string | null
    description: string | null
    amount_claimed: number | null
  }

  export type ClaimCountAggregateOutputType = {
    id: number
    user_id: number
    accident_id: number
    claim_number: number
    date_submitted: number
    status: number
    description: number
    amount_claimed: number
    _all: number
  }


  export type ClaimAvgAggregateInputType = {
    id?: true
    user_id?: true
    accident_id?: true
    amount_claimed?: true
  }

  export type ClaimSumAggregateInputType = {
    id?: true
    user_id?: true
    accident_id?: true
    amount_claimed?: true
  }

  export type ClaimMinAggregateInputType = {
    id?: true
    user_id?: true
    accident_id?: true
    claim_number?: true
    date_submitted?: true
    status?: true
    description?: true
    amount_claimed?: true
  }

  export type ClaimMaxAggregateInputType = {
    id?: true
    user_id?: true
    accident_id?: true
    claim_number?: true
    date_submitted?: true
    status?: true
    description?: true
    amount_claimed?: true
  }

  export type ClaimCountAggregateInputType = {
    id?: true
    user_id?: true
    accident_id?: true
    claim_number?: true
    date_submitted?: true
    status?: true
    description?: true
    amount_claimed?: true
    _all?: true
  }

  export type ClaimAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Claim to aggregate.
     */
    where?: ClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Claims to fetch.
     */
    orderBy?: ClaimOrderByWithRelationInput | ClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Claims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Claims.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Claims
    **/
    _count?: true | ClaimCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClaimAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClaimSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClaimMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClaimMaxAggregateInputType
  }

  export type GetClaimAggregateType<T extends ClaimAggregateArgs> = {
        [P in keyof T & keyof AggregateClaim]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClaim[P]>
      : GetScalarType<T[P], AggregateClaim[P]>
  }




  export type ClaimGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClaimWhereInput
    orderBy?: ClaimOrderByWithAggregationInput | ClaimOrderByWithAggregationInput[]
    by: ClaimScalarFieldEnum[] | ClaimScalarFieldEnum
    having?: ClaimScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClaimCountAggregateInputType | true
    _avg?: ClaimAvgAggregateInputType
    _sum?: ClaimSumAggregateInputType
    _min?: ClaimMinAggregateInputType
    _max?: ClaimMaxAggregateInputType
  }

  export type ClaimGroupByOutputType = {
    id: number
    user_id: number
    accident_id: number
    claim_number: string
    date_submitted: Date
    status: string
    description: string
    amount_claimed: number
    _count: ClaimCountAggregateOutputType | null
    _avg: ClaimAvgAggregateOutputType | null
    _sum: ClaimSumAggregateOutputType | null
    _min: ClaimMinAggregateOutputType | null
    _max: ClaimMaxAggregateOutputType | null
  }

  type GetClaimGroupByPayload<T extends ClaimGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClaimGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClaimGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClaimGroupByOutputType[P]>
            : GetScalarType<T[P], ClaimGroupByOutputType[P]>
        }
      >
    >


  export type ClaimSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    accident_id?: boolean
    claim_number?: boolean
    date_submitted?: boolean
    status?: boolean
    description?: boolean
    amount_claimed?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    accident?: boolean | AccidentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["claim"]>


  export type ClaimSelectScalar = {
    id?: boolean
    user_id?: boolean
    accident_id?: boolean
    claim_number?: boolean
    date_submitted?: boolean
    status?: boolean
    description?: boolean
    amount_claimed?: boolean
  }

  export type ClaimInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    accident?: boolean | AccidentDefaultArgs<ExtArgs>
  }

  export type $ClaimPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Claim"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      accident: Prisma.$AccidentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      accident_id: number
      claim_number: string
      date_submitted: Date
      status: string
      description: string
      amount_claimed: number
    }, ExtArgs["result"]["claim"]>
    composites: {}
  }

  type ClaimGetPayload<S extends boolean | null | undefined | ClaimDefaultArgs> = $Result.GetResult<Prisma.$ClaimPayload, S>

  type ClaimCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClaimFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClaimCountAggregateInputType | true
    }

  export interface ClaimDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Claim'], meta: { name: 'Claim' } }
    /**
     * Find zero or one Claim that matches the filter.
     * @param {ClaimFindUniqueArgs} args - Arguments to find a Claim
     * @example
     * // Get one Claim
     * const claim = await prisma.claim.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClaimFindUniqueArgs>(args: SelectSubset<T, ClaimFindUniqueArgs<ExtArgs>>): Prisma__ClaimClient<$Result.GetResult<Prisma.$ClaimPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Claim that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClaimFindUniqueOrThrowArgs} args - Arguments to find a Claim
     * @example
     * // Get one Claim
     * const claim = await prisma.claim.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClaimFindUniqueOrThrowArgs>(args: SelectSubset<T, ClaimFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClaimClient<$Result.GetResult<Prisma.$ClaimPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Claim that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaimFindFirstArgs} args - Arguments to find a Claim
     * @example
     * // Get one Claim
     * const claim = await prisma.claim.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClaimFindFirstArgs>(args?: SelectSubset<T, ClaimFindFirstArgs<ExtArgs>>): Prisma__ClaimClient<$Result.GetResult<Prisma.$ClaimPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Claim that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaimFindFirstOrThrowArgs} args - Arguments to find a Claim
     * @example
     * // Get one Claim
     * const claim = await prisma.claim.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClaimFindFirstOrThrowArgs>(args?: SelectSubset<T, ClaimFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClaimClient<$Result.GetResult<Prisma.$ClaimPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Claims that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaimFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Claims
     * const claims = await prisma.claim.findMany()
     * 
     * // Get first 10 Claims
     * const claims = await prisma.claim.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const claimWithIdOnly = await prisma.claim.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClaimFindManyArgs>(args?: SelectSubset<T, ClaimFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClaimPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Claim.
     * @param {ClaimCreateArgs} args - Arguments to create a Claim.
     * @example
     * // Create one Claim
     * const Claim = await prisma.claim.create({
     *   data: {
     *     // ... data to create a Claim
     *   }
     * })
     * 
     */
    create<T extends ClaimCreateArgs>(args: SelectSubset<T, ClaimCreateArgs<ExtArgs>>): Prisma__ClaimClient<$Result.GetResult<Prisma.$ClaimPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Claims.
     * @param {ClaimCreateManyArgs} args - Arguments to create many Claims.
     * @example
     * // Create many Claims
     * const claim = await prisma.claim.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClaimCreateManyArgs>(args?: SelectSubset<T, ClaimCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Claim.
     * @param {ClaimDeleteArgs} args - Arguments to delete one Claim.
     * @example
     * // Delete one Claim
     * const Claim = await prisma.claim.delete({
     *   where: {
     *     // ... filter to delete one Claim
     *   }
     * })
     * 
     */
    delete<T extends ClaimDeleteArgs>(args: SelectSubset<T, ClaimDeleteArgs<ExtArgs>>): Prisma__ClaimClient<$Result.GetResult<Prisma.$ClaimPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Claim.
     * @param {ClaimUpdateArgs} args - Arguments to update one Claim.
     * @example
     * // Update one Claim
     * const claim = await prisma.claim.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClaimUpdateArgs>(args: SelectSubset<T, ClaimUpdateArgs<ExtArgs>>): Prisma__ClaimClient<$Result.GetResult<Prisma.$ClaimPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Claims.
     * @param {ClaimDeleteManyArgs} args - Arguments to filter Claims to delete.
     * @example
     * // Delete a few Claims
     * const { count } = await prisma.claim.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClaimDeleteManyArgs>(args?: SelectSubset<T, ClaimDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Claims.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaimUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Claims
     * const claim = await prisma.claim.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClaimUpdateManyArgs>(args: SelectSubset<T, ClaimUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Claim.
     * @param {ClaimUpsertArgs} args - Arguments to update or create a Claim.
     * @example
     * // Update or create a Claim
     * const claim = await prisma.claim.upsert({
     *   create: {
     *     // ... data to create a Claim
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Claim we want to update
     *   }
     * })
     */
    upsert<T extends ClaimUpsertArgs>(args: SelectSubset<T, ClaimUpsertArgs<ExtArgs>>): Prisma__ClaimClient<$Result.GetResult<Prisma.$ClaimPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Claims.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaimCountArgs} args - Arguments to filter Claims to count.
     * @example
     * // Count the number of Claims
     * const count = await prisma.claim.count({
     *   where: {
     *     // ... the filter for the Claims we want to count
     *   }
     * })
    **/
    count<T extends ClaimCountArgs>(
      args?: Subset<T, ClaimCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClaimCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Claim.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaimAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClaimAggregateArgs>(args: Subset<T, ClaimAggregateArgs>): Prisma.PrismaPromise<GetClaimAggregateType<T>>

    /**
     * Group by Claim.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaimGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClaimGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClaimGroupByArgs['orderBy'] }
        : { orderBy?: ClaimGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClaimGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClaimGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Claim model
   */
  readonly fields: ClaimFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Claim.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClaimClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    accident<T extends AccidentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccidentDefaultArgs<ExtArgs>>): Prisma__AccidentClient<$Result.GetResult<Prisma.$AccidentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Claim model
   */ 
  interface ClaimFieldRefs {
    readonly id: FieldRef<"Claim", 'Int'>
    readonly user_id: FieldRef<"Claim", 'Int'>
    readonly accident_id: FieldRef<"Claim", 'Int'>
    readonly claim_number: FieldRef<"Claim", 'String'>
    readonly date_submitted: FieldRef<"Claim", 'DateTime'>
    readonly status: FieldRef<"Claim", 'String'>
    readonly description: FieldRef<"Claim", 'String'>
    readonly amount_claimed: FieldRef<"Claim", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Claim findUnique
   */
  export type ClaimFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaimInclude<ExtArgs> | null
    /**
     * Filter, which Claim to fetch.
     */
    where: ClaimWhereUniqueInput
  }

  /**
   * Claim findUniqueOrThrow
   */
  export type ClaimFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaimInclude<ExtArgs> | null
    /**
     * Filter, which Claim to fetch.
     */
    where: ClaimWhereUniqueInput
  }

  /**
   * Claim findFirst
   */
  export type ClaimFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaimInclude<ExtArgs> | null
    /**
     * Filter, which Claim to fetch.
     */
    where?: ClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Claims to fetch.
     */
    orderBy?: ClaimOrderByWithRelationInput | ClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Claims.
     */
    cursor?: ClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Claims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Claims.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Claims.
     */
    distinct?: ClaimScalarFieldEnum | ClaimScalarFieldEnum[]
  }

  /**
   * Claim findFirstOrThrow
   */
  export type ClaimFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaimInclude<ExtArgs> | null
    /**
     * Filter, which Claim to fetch.
     */
    where?: ClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Claims to fetch.
     */
    orderBy?: ClaimOrderByWithRelationInput | ClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Claims.
     */
    cursor?: ClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Claims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Claims.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Claims.
     */
    distinct?: ClaimScalarFieldEnum | ClaimScalarFieldEnum[]
  }

  /**
   * Claim findMany
   */
  export type ClaimFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaimInclude<ExtArgs> | null
    /**
     * Filter, which Claims to fetch.
     */
    where?: ClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Claims to fetch.
     */
    orderBy?: ClaimOrderByWithRelationInput | ClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Claims.
     */
    cursor?: ClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Claims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Claims.
     */
    skip?: number
    distinct?: ClaimScalarFieldEnum | ClaimScalarFieldEnum[]
  }

  /**
   * Claim create
   */
  export type ClaimCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaimInclude<ExtArgs> | null
    /**
     * The data needed to create a Claim.
     */
    data: XOR<ClaimCreateInput, ClaimUncheckedCreateInput>
  }

  /**
   * Claim createMany
   */
  export type ClaimCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Claims.
     */
    data: ClaimCreateManyInput | ClaimCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Claim update
   */
  export type ClaimUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaimInclude<ExtArgs> | null
    /**
     * The data needed to update a Claim.
     */
    data: XOR<ClaimUpdateInput, ClaimUncheckedUpdateInput>
    /**
     * Choose, which Claim to update.
     */
    where: ClaimWhereUniqueInput
  }

  /**
   * Claim updateMany
   */
  export type ClaimUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Claims.
     */
    data: XOR<ClaimUpdateManyMutationInput, ClaimUncheckedUpdateManyInput>
    /**
     * Filter which Claims to update
     */
    where?: ClaimWhereInput
  }

  /**
   * Claim upsert
   */
  export type ClaimUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaimInclude<ExtArgs> | null
    /**
     * The filter to search for the Claim to update in case it exists.
     */
    where: ClaimWhereUniqueInput
    /**
     * In case the Claim found by the `where` argument doesn't exist, create a new Claim with this data.
     */
    create: XOR<ClaimCreateInput, ClaimUncheckedCreateInput>
    /**
     * In case the Claim was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClaimUpdateInput, ClaimUncheckedUpdateInput>
  }

  /**
   * Claim delete
   */
  export type ClaimDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaimInclude<ExtArgs> | null
    /**
     * Filter which Claim to delete.
     */
    where: ClaimWhereUniqueInput
  }

  /**
   * Claim deleteMany
   */
  export type ClaimDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Claims to delete
     */
    where?: ClaimWhereInput
  }

  /**
   * Claim without action
   */
  export type ClaimDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaimInclude<ExtArgs> | null
  }


  /**
   * Model AccidentVehicle
   */

  export type AggregateAccidentVehicle = {
    _count: AccidentVehicleCountAggregateOutputType | null
    _avg: AccidentVehicleAvgAggregateOutputType | null
    _sum: AccidentVehicleSumAggregateOutputType | null
    _min: AccidentVehicleMinAggregateOutputType | null
    _max: AccidentVehicleMaxAggregateOutputType | null
  }

  export type AccidentVehicleAvgAggregateOutputType = {
    id: number | null
    accident_id: number | null
    vehicle_id: number | null
  }

  export type AccidentVehicleSumAggregateOutputType = {
    id: number | null
    accident_id: number | null
    vehicle_id: number | null
  }

  export type AccidentVehicleMinAggregateOutputType = {
    id: number | null
    accident_id: number | null
    vehicle_id: number | null
  }

  export type AccidentVehicleMaxAggregateOutputType = {
    id: number | null
    accident_id: number | null
    vehicle_id: number | null
  }

  export type AccidentVehicleCountAggregateOutputType = {
    id: number
    accident_id: number
    vehicle_id: number
    _all: number
  }


  export type AccidentVehicleAvgAggregateInputType = {
    id?: true
    accident_id?: true
    vehicle_id?: true
  }

  export type AccidentVehicleSumAggregateInputType = {
    id?: true
    accident_id?: true
    vehicle_id?: true
  }

  export type AccidentVehicleMinAggregateInputType = {
    id?: true
    accident_id?: true
    vehicle_id?: true
  }

  export type AccidentVehicleMaxAggregateInputType = {
    id?: true
    accident_id?: true
    vehicle_id?: true
  }

  export type AccidentVehicleCountAggregateInputType = {
    id?: true
    accident_id?: true
    vehicle_id?: true
    _all?: true
  }

  export type AccidentVehicleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccidentVehicle to aggregate.
     */
    where?: AccidentVehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccidentVehicles to fetch.
     */
    orderBy?: AccidentVehicleOrderByWithRelationInput | AccidentVehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccidentVehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccidentVehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccidentVehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccidentVehicles
    **/
    _count?: true | AccidentVehicleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccidentVehicleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccidentVehicleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccidentVehicleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccidentVehicleMaxAggregateInputType
  }

  export type GetAccidentVehicleAggregateType<T extends AccidentVehicleAggregateArgs> = {
        [P in keyof T & keyof AggregateAccidentVehicle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccidentVehicle[P]>
      : GetScalarType<T[P], AggregateAccidentVehicle[P]>
  }




  export type AccidentVehicleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccidentVehicleWhereInput
    orderBy?: AccidentVehicleOrderByWithAggregationInput | AccidentVehicleOrderByWithAggregationInput[]
    by: AccidentVehicleScalarFieldEnum[] | AccidentVehicleScalarFieldEnum
    having?: AccidentVehicleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccidentVehicleCountAggregateInputType | true
    _avg?: AccidentVehicleAvgAggregateInputType
    _sum?: AccidentVehicleSumAggregateInputType
    _min?: AccidentVehicleMinAggregateInputType
    _max?: AccidentVehicleMaxAggregateInputType
  }

  export type AccidentVehicleGroupByOutputType = {
    id: number
    accident_id: number
    vehicle_id: number
    _count: AccidentVehicleCountAggregateOutputType | null
    _avg: AccidentVehicleAvgAggregateOutputType | null
    _sum: AccidentVehicleSumAggregateOutputType | null
    _min: AccidentVehicleMinAggregateOutputType | null
    _max: AccidentVehicleMaxAggregateOutputType | null
  }

  type GetAccidentVehicleGroupByPayload<T extends AccidentVehicleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccidentVehicleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccidentVehicleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccidentVehicleGroupByOutputType[P]>
            : GetScalarType<T[P], AccidentVehicleGroupByOutputType[P]>
        }
      >
    >


  export type AccidentVehicleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accident_id?: boolean
    vehicle_id?: boolean
    accident?: boolean | AccidentDefaultArgs<ExtArgs>
    vehicle?: boolean | VehicleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accidentVehicle"]>


  export type AccidentVehicleSelectScalar = {
    id?: boolean
    accident_id?: boolean
    vehicle_id?: boolean
  }

  export type AccidentVehicleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accident?: boolean | AccidentDefaultArgs<ExtArgs>
    vehicle?: boolean | VehicleDefaultArgs<ExtArgs>
  }

  export type $AccidentVehiclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccidentVehicle"
    objects: {
      accident: Prisma.$AccidentPayload<ExtArgs>
      vehicle: Prisma.$VehiclePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      accident_id: number
      vehicle_id: number
    }, ExtArgs["result"]["accidentVehicle"]>
    composites: {}
  }

  type AccidentVehicleGetPayload<S extends boolean | null | undefined | AccidentVehicleDefaultArgs> = $Result.GetResult<Prisma.$AccidentVehiclePayload, S>

  type AccidentVehicleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccidentVehicleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccidentVehicleCountAggregateInputType | true
    }

  export interface AccidentVehicleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccidentVehicle'], meta: { name: 'AccidentVehicle' } }
    /**
     * Find zero or one AccidentVehicle that matches the filter.
     * @param {AccidentVehicleFindUniqueArgs} args - Arguments to find a AccidentVehicle
     * @example
     * // Get one AccidentVehicle
     * const accidentVehicle = await prisma.accidentVehicle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccidentVehicleFindUniqueArgs>(args: SelectSubset<T, AccidentVehicleFindUniqueArgs<ExtArgs>>): Prisma__AccidentVehicleClient<$Result.GetResult<Prisma.$AccidentVehiclePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AccidentVehicle that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccidentVehicleFindUniqueOrThrowArgs} args - Arguments to find a AccidentVehicle
     * @example
     * // Get one AccidentVehicle
     * const accidentVehicle = await prisma.accidentVehicle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccidentVehicleFindUniqueOrThrowArgs>(args: SelectSubset<T, AccidentVehicleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccidentVehicleClient<$Result.GetResult<Prisma.$AccidentVehiclePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AccidentVehicle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentVehicleFindFirstArgs} args - Arguments to find a AccidentVehicle
     * @example
     * // Get one AccidentVehicle
     * const accidentVehicle = await prisma.accidentVehicle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccidentVehicleFindFirstArgs>(args?: SelectSubset<T, AccidentVehicleFindFirstArgs<ExtArgs>>): Prisma__AccidentVehicleClient<$Result.GetResult<Prisma.$AccidentVehiclePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AccidentVehicle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentVehicleFindFirstOrThrowArgs} args - Arguments to find a AccidentVehicle
     * @example
     * // Get one AccidentVehicle
     * const accidentVehicle = await prisma.accidentVehicle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccidentVehicleFindFirstOrThrowArgs>(args?: SelectSubset<T, AccidentVehicleFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccidentVehicleClient<$Result.GetResult<Prisma.$AccidentVehiclePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AccidentVehicles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentVehicleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccidentVehicles
     * const accidentVehicles = await prisma.accidentVehicle.findMany()
     * 
     * // Get first 10 AccidentVehicles
     * const accidentVehicles = await prisma.accidentVehicle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accidentVehicleWithIdOnly = await prisma.accidentVehicle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccidentVehicleFindManyArgs>(args?: SelectSubset<T, AccidentVehicleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccidentVehiclePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AccidentVehicle.
     * @param {AccidentVehicleCreateArgs} args - Arguments to create a AccidentVehicle.
     * @example
     * // Create one AccidentVehicle
     * const AccidentVehicle = await prisma.accidentVehicle.create({
     *   data: {
     *     // ... data to create a AccidentVehicle
     *   }
     * })
     * 
     */
    create<T extends AccidentVehicleCreateArgs>(args: SelectSubset<T, AccidentVehicleCreateArgs<ExtArgs>>): Prisma__AccidentVehicleClient<$Result.GetResult<Prisma.$AccidentVehiclePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AccidentVehicles.
     * @param {AccidentVehicleCreateManyArgs} args - Arguments to create many AccidentVehicles.
     * @example
     * // Create many AccidentVehicles
     * const accidentVehicle = await prisma.accidentVehicle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccidentVehicleCreateManyArgs>(args?: SelectSubset<T, AccidentVehicleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccidentVehicle.
     * @param {AccidentVehicleDeleteArgs} args - Arguments to delete one AccidentVehicle.
     * @example
     * // Delete one AccidentVehicle
     * const AccidentVehicle = await prisma.accidentVehicle.delete({
     *   where: {
     *     // ... filter to delete one AccidentVehicle
     *   }
     * })
     * 
     */
    delete<T extends AccidentVehicleDeleteArgs>(args: SelectSubset<T, AccidentVehicleDeleteArgs<ExtArgs>>): Prisma__AccidentVehicleClient<$Result.GetResult<Prisma.$AccidentVehiclePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AccidentVehicle.
     * @param {AccidentVehicleUpdateArgs} args - Arguments to update one AccidentVehicle.
     * @example
     * // Update one AccidentVehicle
     * const accidentVehicle = await prisma.accidentVehicle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccidentVehicleUpdateArgs>(args: SelectSubset<T, AccidentVehicleUpdateArgs<ExtArgs>>): Prisma__AccidentVehicleClient<$Result.GetResult<Prisma.$AccidentVehiclePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AccidentVehicles.
     * @param {AccidentVehicleDeleteManyArgs} args - Arguments to filter AccidentVehicles to delete.
     * @example
     * // Delete a few AccidentVehicles
     * const { count } = await prisma.accidentVehicle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccidentVehicleDeleteManyArgs>(args?: SelectSubset<T, AccidentVehicleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccidentVehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentVehicleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccidentVehicles
     * const accidentVehicle = await prisma.accidentVehicle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccidentVehicleUpdateManyArgs>(args: SelectSubset<T, AccidentVehicleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccidentVehicle.
     * @param {AccidentVehicleUpsertArgs} args - Arguments to update or create a AccidentVehicle.
     * @example
     * // Update or create a AccidentVehicle
     * const accidentVehicle = await prisma.accidentVehicle.upsert({
     *   create: {
     *     // ... data to create a AccidentVehicle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccidentVehicle we want to update
     *   }
     * })
     */
    upsert<T extends AccidentVehicleUpsertArgs>(args: SelectSubset<T, AccidentVehicleUpsertArgs<ExtArgs>>): Prisma__AccidentVehicleClient<$Result.GetResult<Prisma.$AccidentVehiclePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AccidentVehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentVehicleCountArgs} args - Arguments to filter AccidentVehicles to count.
     * @example
     * // Count the number of AccidentVehicles
     * const count = await prisma.accidentVehicle.count({
     *   where: {
     *     // ... the filter for the AccidentVehicles we want to count
     *   }
     * })
    **/
    count<T extends AccidentVehicleCountArgs>(
      args?: Subset<T, AccidentVehicleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccidentVehicleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccidentVehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentVehicleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccidentVehicleAggregateArgs>(args: Subset<T, AccidentVehicleAggregateArgs>): Prisma.PrismaPromise<GetAccidentVehicleAggregateType<T>>

    /**
     * Group by AccidentVehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentVehicleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccidentVehicleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccidentVehicleGroupByArgs['orderBy'] }
        : { orderBy?: AccidentVehicleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccidentVehicleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccidentVehicleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccidentVehicle model
   */
  readonly fields: AccidentVehicleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccidentVehicle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccidentVehicleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accident<T extends AccidentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccidentDefaultArgs<ExtArgs>>): Prisma__AccidentClient<$Result.GetResult<Prisma.$AccidentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    vehicle<T extends VehicleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VehicleDefaultArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccidentVehicle model
   */ 
  interface AccidentVehicleFieldRefs {
    readonly id: FieldRef<"AccidentVehicle", 'Int'>
    readonly accident_id: FieldRef<"AccidentVehicle", 'Int'>
    readonly vehicle_id: FieldRef<"AccidentVehicle", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AccidentVehicle findUnique
   */
  export type AccidentVehicleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentVehicle
     */
    select?: AccidentVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentVehicleInclude<ExtArgs> | null
    /**
     * Filter, which AccidentVehicle to fetch.
     */
    where: AccidentVehicleWhereUniqueInput
  }

  /**
   * AccidentVehicle findUniqueOrThrow
   */
  export type AccidentVehicleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentVehicle
     */
    select?: AccidentVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentVehicleInclude<ExtArgs> | null
    /**
     * Filter, which AccidentVehicle to fetch.
     */
    where: AccidentVehicleWhereUniqueInput
  }

  /**
   * AccidentVehicle findFirst
   */
  export type AccidentVehicleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentVehicle
     */
    select?: AccidentVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentVehicleInclude<ExtArgs> | null
    /**
     * Filter, which AccidentVehicle to fetch.
     */
    where?: AccidentVehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccidentVehicles to fetch.
     */
    orderBy?: AccidentVehicleOrderByWithRelationInput | AccidentVehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccidentVehicles.
     */
    cursor?: AccidentVehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccidentVehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccidentVehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccidentVehicles.
     */
    distinct?: AccidentVehicleScalarFieldEnum | AccidentVehicleScalarFieldEnum[]
  }

  /**
   * AccidentVehicle findFirstOrThrow
   */
  export type AccidentVehicleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentVehicle
     */
    select?: AccidentVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentVehicleInclude<ExtArgs> | null
    /**
     * Filter, which AccidentVehicle to fetch.
     */
    where?: AccidentVehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccidentVehicles to fetch.
     */
    orderBy?: AccidentVehicleOrderByWithRelationInput | AccidentVehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccidentVehicles.
     */
    cursor?: AccidentVehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccidentVehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccidentVehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccidentVehicles.
     */
    distinct?: AccidentVehicleScalarFieldEnum | AccidentVehicleScalarFieldEnum[]
  }

  /**
   * AccidentVehicle findMany
   */
  export type AccidentVehicleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentVehicle
     */
    select?: AccidentVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentVehicleInclude<ExtArgs> | null
    /**
     * Filter, which AccidentVehicles to fetch.
     */
    where?: AccidentVehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccidentVehicles to fetch.
     */
    orderBy?: AccidentVehicleOrderByWithRelationInput | AccidentVehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccidentVehicles.
     */
    cursor?: AccidentVehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccidentVehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccidentVehicles.
     */
    skip?: number
    distinct?: AccidentVehicleScalarFieldEnum | AccidentVehicleScalarFieldEnum[]
  }

  /**
   * AccidentVehicle create
   */
  export type AccidentVehicleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentVehicle
     */
    select?: AccidentVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentVehicleInclude<ExtArgs> | null
    /**
     * The data needed to create a AccidentVehicle.
     */
    data: XOR<AccidentVehicleCreateInput, AccidentVehicleUncheckedCreateInput>
  }

  /**
   * AccidentVehicle createMany
   */
  export type AccidentVehicleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccidentVehicles.
     */
    data: AccidentVehicleCreateManyInput | AccidentVehicleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccidentVehicle update
   */
  export type AccidentVehicleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentVehicle
     */
    select?: AccidentVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentVehicleInclude<ExtArgs> | null
    /**
     * The data needed to update a AccidentVehicle.
     */
    data: XOR<AccidentVehicleUpdateInput, AccidentVehicleUncheckedUpdateInput>
    /**
     * Choose, which AccidentVehicle to update.
     */
    where: AccidentVehicleWhereUniqueInput
  }

  /**
   * AccidentVehicle updateMany
   */
  export type AccidentVehicleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccidentVehicles.
     */
    data: XOR<AccidentVehicleUpdateManyMutationInput, AccidentVehicleUncheckedUpdateManyInput>
    /**
     * Filter which AccidentVehicles to update
     */
    where?: AccidentVehicleWhereInput
  }

  /**
   * AccidentVehicle upsert
   */
  export type AccidentVehicleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentVehicle
     */
    select?: AccidentVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentVehicleInclude<ExtArgs> | null
    /**
     * The filter to search for the AccidentVehicle to update in case it exists.
     */
    where: AccidentVehicleWhereUniqueInput
    /**
     * In case the AccidentVehicle found by the `where` argument doesn't exist, create a new AccidentVehicle with this data.
     */
    create: XOR<AccidentVehicleCreateInput, AccidentVehicleUncheckedCreateInput>
    /**
     * In case the AccidentVehicle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccidentVehicleUpdateInput, AccidentVehicleUncheckedUpdateInput>
  }

  /**
   * AccidentVehicle delete
   */
  export type AccidentVehicleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentVehicle
     */
    select?: AccidentVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentVehicleInclude<ExtArgs> | null
    /**
     * Filter which AccidentVehicle to delete.
     */
    where: AccidentVehicleWhereUniqueInput
  }

  /**
   * AccidentVehicle deleteMany
   */
  export type AccidentVehicleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccidentVehicles to delete
     */
    where?: AccidentVehicleWhereInput
  }

  /**
   * AccidentVehicle without action
   */
  export type AccidentVehicleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentVehicle
     */
    select?: AccidentVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentVehicleInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    contact_number: 'contact_number',
    email: 'email',
    date_of_birth: 'date_of_birth',
    role: 'role',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const InsurancePolicyScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    vehicle_id: 'vehicle_id',
    policy_number: 'policy_number',
    type: 'type',
    start_date: 'start_date',
    end_date: 'end_date',
    amount: 'amount',
    status: 'status'
  };

  export type InsurancePolicyScalarFieldEnum = (typeof InsurancePolicyScalarFieldEnum)[keyof typeof InsurancePolicyScalarFieldEnum]


  export const VehicleScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    make: 'make',
    model: 'model',
    year: 'year',
    license_plate: 'license_plate',
    vin_number: 'vin_number'
  };

  export type VehicleScalarFieldEnum = (typeof VehicleScalarFieldEnum)[keyof typeof VehicleScalarFieldEnum]


  export const AccidentScalarFieldEnum: {
    id: 'id',
    date: 'date',
    location: 'location',
    description: 'description'
  };

  export type AccidentScalarFieldEnum = (typeof AccidentScalarFieldEnum)[keyof typeof AccidentScalarFieldEnum]


  export const ClaimScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    accident_id: 'accident_id',
    claim_number: 'claim_number',
    date_submitted: 'date_submitted',
    status: 'status',
    description: 'description',
    amount_claimed: 'amount_claimed'
  };

  export type ClaimScalarFieldEnum = (typeof ClaimScalarFieldEnum)[keyof typeof ClaimScalarFieldEnum]


  export const AccidentVehicleScalarFieldEnum: {
    id: 'id',
    accident_id: 'accident_id',
    vehicle_id: 'vehicle_id'
  };

  export type AccidentVehicleScalarFieldEnum = (typeof AccidentVehicleScalarFieldEnum)[keyof typeof AccidentVehicleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    address?: StringFilter<"User"> | string
    contact_number?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    date_of_birth?: DateTimeFilter<"User"> | Date | string
    role?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    insurancePolicies?: InsurancePolicyListRelationFilter
    vehicles?: VehicleListRelationFilter
    claims?: ClaimListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contact_number?: SortOrder
    email?: SortOrder
    date_of_birth?: SortOrder
    role?: SortOrder
    password?: SortOrder
    insurancePolicies?: InsurancePolicyOrderByRelationAggregateInput
    vehicles?: VehicleOrderByRelationAggregateInput
    claims?: ClaimOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    address?: StringFilter<"User"> | string
    contact_number?: StringFilter<"User"> | string
    date_of_birth?: DateTimeFilter<"User"> | Date | string
    role?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    insurancePolicies?: InsurancePolicyListRelationFilter
    vehicles?: VehicleListRelationFilter
    claims?: ClaimListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contact_number?: SortOrder
    email?: SortOrder
    date_of_birth?: SortOrder
    role?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    address?: StringWithAggregatesFilter<"User"> | string
    contact_number?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    date_of_birth?: DateTimeWithAggregatesFilter<"User"> | Date | string
    role?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type InsurancePolicyWhereInput = {
    AND?: InsurancePolicyWhereInput | InsurancePolicyWhereInput[]
    OR?: InsurancePolicyWhereInput[]
    NOT?: InsurancePolicyWhereInput | InsurancePolicyWhereInput[]
    id?: IntFilter<"InsurancePolicy"> | number
    user_id?: IntFilter<"InsurancePolicy"> | number
    vehicle_id?: IntFilter<"InsurancePolicy"> | number
    policy_number?: StringFilter<"InsurancePolicy"> | string
    type?: StringFilter<"InsurancePolicy"> | string
    start_date?: DateTimeFilter<"InsurancePolicy"> | Date | string
    end_date?: DateTimeFilter<"InsurancePolicy"> | Date | string
    amount?: FloatFilter<"InsurancePolicy"> | number
    status?: StringFilter<"InsurancePolicy"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    vehicle?: XOR<VehicleRelationFilter, VehicleWhereInput>
  }

  export type InsurancePolicyOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    vehicle_id?: SortOrder
    policy_number?: SortOrder
    type?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    user?: UserOrderByWithRelationInput
    vehicle?: VehicleOrderByWithRelationInput
  }

  export type InsurancePolicyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    policy_number?: string
    AND?: InsurancePolicyWhereInput | InsurancePolicyWhereInput[]
    OR?: InsurancePolicyWhereInput[]
    NOT?: InsurancePolicyWhereInput | InsurancePolicyWhereInput[]
    user_id?: IntFilter<"InsurancePolicy"> | number
    vehicle_id?: IntFilter<"InsurancePolicy"> | number
    type?: StringFilter<"InsurancePolicy"> | string
    start_date?: DateTimeFilter<"InsurancePolicy"> | Date | string
    end_date?: DateTimeFilter<"InsurancePolicy"> | Date | string
    amount?: FloatFilter<"InsurancePolicy"> | number
    status?: StringFilter<"InsurancePolicy"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    vehicle?: XOR<VehicleRelationFilter, VehicleWhereInput>
  }, "id" | "policy_number">

  export type InsurancePolicyOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    vehicle_id?: SortOrder
    policy_number?: SortOrder
    type?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    _count?: InsurancePolicyCountOrderByAggregateInput
    _avg?: InsurancePolicyAvgOrderByAggregateInput
    _max?: InsurancePolicyMaxOrderByAggregateInput
    _min?: InsurancePolicyMinOrderByAggregateInput
    _sum?: InsurancePolicySumOrderByAggregateInput
  }

  export type InsurancePolicyScalarWhereWithAggregatesInput = {
    AND?: InsurancePolicyScalarWhereWithAggregatesInput | InsurancePolicyScalarWhereWithAggregatesInput[]
    OR?: InsurancePolicyScalarWhereWithAggregatesInput[]
    NOT?: InsurancePolicyScalarWhereWithAggregatesInput | InsurancePolicyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InsurancePolicy"> | number
    user_id?: IntWithAggregatesFilter<"InsurancePolicy"> | number
    vehicle_id?: IntWithAggregatesFilter<"InsurancePolicy"> | number
    policy_number?: StringWithAggregatesFilter<"InsurancePolicy"> | string
    type?: StringWithAggregatesFilter<"InsurancePolicy"> | string
    start_date?: DateTimeWithAggregatesFilter<"InsurancePolicy"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"InsurancePolicy"> | Date | string
    amount?: FloatWithAggregatesFilter<"InsurancePolicy"> | number
    status?: StringWithAggregatesFilter<"InsurancePolicy"> | string
  }

  export type VehicleWhereInput = {
    AND?: VehicleWhereInput | VehicleWhereInput[]
    OR?: VehicleWhereInput[]
    NOT?: VehicleWhereInput | VehicleWhereInput[]
    id?: IntFilter<"Vehicle"> | number
    user_id?: IntFilter<"Vehicle"> | number
    make?: StringFilter<"Vehicle"> | string
    model?: StringFilter<"Vehicle"> | string
    year?: IntFilter<"Vehicle"> | number
    license_plate?: StringFilter<"Vehicle"> | string
    vin_number?: StringFilter<"Vehicle"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    insurancePolicies?: InsurancePolicyListRelationFilter
    accidents?: AccidentListRelationFilter
    AccidentVehicle?: AccidentVehicleListRelationFilter
  }

  export type VehicleOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    make?: SortOrder
    model?: SortOrder
    year?: SortOrder
    license_plate?: SortOrder
    vin_number?: SortOrder
    user?: UserOrderByWithRelationInput
    insurancePolicies?: InsurancePolicyOrderByRelationAggregateInput
    accidents?: AccidentOrderByRelationAggregateInput
    AccidentVehicle?: AccidentVehicleOrderByRelationAggregateInput
  }

  export type VehicleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    vin_number?: string
    AND?: VehicleWhereInput | VehicleWhereInput[]
    OR?: VehicleWhereInput[]
    NOT?: VehicleWhereInput | VehicleWhereInput[]
    user_id?: IntFilter<"Vehicle"> | number
    make?: StringFilter<"Vehicle"> | string
    model?: StringFilter<"Vehicle"> | string
    year?: IntFilter<"Vehicle"> | number
    license_plate?: StringFilter<"Vehicle"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    insurancePolicies?: InsurancePolicyListRelationFilter
    accidents?: AccidentListRelationFilter
    AccidentVehicle?: AccidentVehicleListRelationFilter
  }, "id" | "vin_number">

  export type VehicleOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    make?: SortOrder
    model?: SortOrder
    year?: SortOrder
    license_plate?: SortOrder
    vin_number?: SortOrder
    _count?: VehicleCountOrderByAggregateInput
    _avg?: VehicleAvgOrderByAggregateInput
    _max?: VehicleMaxOrderByAggregateInput
    _min?: VehicleMinOrderByAggregateInput
    _sum?: VehicleSumOrderByAggregateInput
  }

  export type VehicleScalarWhereWithAggregatesInput = {
    AND?: VehicleScalarWhereWithAggregatesInput | VehicleScalarWhereWithAggregatesInput[]
    OR?: VehicleScalarWhereWithAggregatesInput[]
    NOT?: VehicleScalarWhereWithAggregatesInput | VehicleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Vehicle"> | number
    user_id?: IntWithAggregatesFilter<"Vehicle"> | number
    make?: StringWithAggregatesFilter<"Vehicle"> | string
    model?: StringWithAggregatesFilter<"Vehicle"> | string
    year?: IntWithAggregatesFilter<"Vehicle"> | number
    license_plate?: StringWithAggregatesFilter<"Vehicle"> | string
    vin_number?: StringWithAggregatesFilter<"Vehicle"> | string
  }

  export type AccidentWhereInput = {
    AND?: AccidentWhereInput | AccidentWhereInput[]
    OR?: AccidentWhereInput[]
    NOT?: AccidentWhereInput | AccidentWhereInput[]
    id?: IntFilter<"Accident"> | number
    date?: DateTimeFilter<"Accident"> | Date | string
    location?: StringFilter<"Accident"> | string
    description?: StringFilter<"Accident"> | string
    claims?: ClaimListRelationFilter
    vehicles?: VehicleListRelationFilter
    AccidentVehicle?: AccidentVehicleListRelationFilter
  }

  export type AccidentOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    location?: SortOrder
    description?: SortOrder
    claims?: ClaimOrderByRelationAggregateInput
    vehicles?: VehicleOrderByRelationAggregateInput
    AccidentVehicle?: AccidentVehicleOrderByRelationAggregateInput
  }

  export type AccidentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AccidentWhereInput | AccidentWhereInput[]
    OR?: AccidentWhereInput[]
    NOT?: AccidentWhereInput | AccidentWhereInput[]
    date?: DateTimeFilter<"Accident"> | Date | string
    location?: StringFilter<"Accident"> | string
    description?: StringFilter<"Accident"> | string
    claims?: ClaimListRelationFilter
    vehicles?: VehicleListRelationFilter
    AccidentVehicle?: AccidentVehicleListRelationFilter
  }, "id">

  export type AccidentOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    location?: SortOrder
    description?: SortOrder
    _count?: AccidentCountOrderByAggregateInput
    _avg?: AccidentAvgOrderByAggregateInput
    _max?: AccidentMaxOrderByAggregateInput
    _min?: AccidentMinOrderByAggregateInput
    _sum?: AccidentSumOrderByAggregateInput
  }

  export type AccidentScalarWhereWithAggregatesInput = {
    AND?: AccidentScalarWhereWithAggregatesInput | AccidentScalarWhereWithAggregatesInput[]
    OR?: AccidentScalarWhereWithAggregatesInput[]
    NOT?: AccidentScalarWhereWithAggregatesInput | AccidentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Accident"> | number
    date?: DateTimeWithAggregatesFilter<"Accident"> | Date | string
    location?: StringWithAggregatesFilter<"Accident"> | string
    description?: StringWithAggregatesFilter<"Accident"> | string
  }

  export type ClaimWhereInput = {
    AND?: ClaimWhereInput | ClaimWhereInput[]
    OR?: ClaimWhereInput[]
    NOT?: ClaimWhereInput | ClaimWhereInput[]
    id?: IntFilter<"Claim"> | number
    user_id?: IntFilter<"Claim"> | number
    accident_id?: IntFilter<"Claim"> | number
    claim_number?: StringFilter<"Claim"> | string
    date_submitted?: DateTimeFilter<"Claim"> | Date | string
    status?: StringFilter<"Claim"> | string
    description?: StringFilter<"Claim"> | string
    amount_claimed?: FloatFilter<"Claim"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    accident?: XOR<AccidentRelationFilter, AccidentWhereInput>
  }

  export type ClaimOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    accident_id?: SortOrder
    claim_number?: SortOrder
    date_submitted?: SortOrder
    status?: SortOrder
    description?: SortOrder
    amount_claimed?: SortOrder
    user?: UserOrderByWithRelationInput
    accident?: AccidentOrderByWithRelationInput
  }

  export type ClaimWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    claim_number?: string
    AND?: ClaimWhereInput | ClaimWhereInput[]
    OR?: ClaimWhereInput[]
    NOT?: ClaimWhereInput | ClaimWhereInput[]
    user_id?: IntFilter<"Claim"> | number
    accident_id?: IntFilter<"Claim"> | number
    date_submitted?: DateTimeFilter<"Claim"> | Date | string
    status?: StringFilter<"Claim"> | string
    description?: StringFilter<"Claim"> | string
    amount_claimed?: FloatFilter<"Claim"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    accident?: XOR<AccidentRelationFilter, AccidentWhereInput>
  }, "id" | "claim_number">

  export type ClaimOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    accident_id?: SortOrder
    claim_number?: SortOrder
    date_submitted?: SortOrder
    status?: SortOrder
    description?: SortOrder
    amount_claimed?: SortOrder
    _count?: ClaimCountOrderByAggregateInput
    _avg?: ClaimAvgOrderByAggregateInput
    _max?: ClaimMaxOrderByAggregateInput
    _min?: ClaimMinOrderByAggregateInput
    _sum?: ClaimSumOrderByAggregateInput
  }

  export type ClaimScalarWhereWithAggregatesInput = {
    AND?: ClaimScalarWhereWithAggregatesInput | ClaimScalarWhereWithAggregatesInput[]
    OR?: ClaimScalarWhereWithAggregatesInput[]
    NOT?: ClaimScalarWhereWithAggregatesInput | ClaimScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Claim"> | number
    user_id?: IntWithAggregatesFilter<"Claim"> | number
    accident_id?: IntWithAggregatesFilter<"Claim"> | number
    claim_number?: StringWithAggregatesFilter<"Claim"> | string
    date_submitted?: DateTimeWithAggregatesFilter<"Claim"> | Date | string
    status?: StringWithAggregatesFilter<"Claim"> | string
    description?: StringWithAggregatesFilter<"Claim"> | string
    amount_claimed?: FloatWithAggregatesFilter<"Claim"> | number
  }

  export type AccidentVehicleWhereInput = {
    AND?: AccidentVehicleWhereInput | AccidentVehicleWhereInput[]
    OR?: AccidentVehicleWhereInput[]
    NOT?: AccidentVehicleWhereInput | AccidentVehicleWhereInput[]
    id?: IntFilter<"AccidentVehicle"> | number
    accident_id?: IntFilter<"AccidentVehicle"> | number
    vehicle_id?: IntFilter<"AccidentVehicle"> | number
    accident?: XOR<AccidentRelationFilter, AccidentWhereInput>
    vehicle?: XOR<VehicleRelationFilter, VehicleWhereInput>
  }

  export type AccidentVehicleOrderByWithRelationInput = {
    id?: SortOrder
    accident_id?: SortOrder
    vehicle_id?: SortOrder
    accident?: AccidentOrderByWithRelationInput
    vehicle?: VehicleOrderByWithRelationInput
  }

  export type AccidentVehicleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AccidentVehicleWhereInput | AccidentVehicleWhereInput[]
    OR?: AccidentVehicleWhereInput[]
    NOT?: AccidentVehicleWhereInput | AccidentVehicleWhereInput[]
    accident_id?: IntFilter<"AccidentVehicle"> | number
    vehicle_id?: IntFilter<"AccidentVehicle"> | number
    accident?: XOR<AccidentRelationFilter, AccidentWhereInput>
    vehicle?: XOR<VehicleRelationFilter, VehicleWhereInput>
  }, "id">

  export type AccidentVehicleOrderByWithAggregationInput = {
    id?: SortOrder
    accident_id?: SortOrder
    vehicle_id?: SortOrder
    _count?: AccidentVehicleCountOrderByAggregateInput
    _avg?: AccidentVehicleAvgOrderByAggregateInput
    _max?: AccidentVehicleMaxOrderByAggregateInput
    _min?: AccidentVehicleMinOrderByAggregateInput
    _sum?: AccidentVehicleSumOrderByAggregateInput
  }

  export type AccidentVehicleScalarWhereWithAggregatesInput = {
    AND?: AccidentVehicleScalarWhereWithAggregatesInput | AccidentVehicleScalarWhereWithAggregatesInput[]
    OR?: AccidentVehicleScalarWhereWithAggregatesInput[]
    NOT?: AccidentVehicleScalarWhereWithAggregatesInput | AccidentVehicleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AccidentVehicle"> | number
    accident_id?: IntWithAggregatesFilter<"AccidentVehicle"> | number
    vehicle_id?: IntWithAggregatesFilter<"AccidentVehicle"> | number
  }

  export type UserCreateInput = {
    name: string
    address: string
    contact_number: string
    email: string
    date_of_birth: Date | string
    role: string
    password: string
    insurancePolicies?: InsurancePolicyCreateNestedManyWithoutUserInput
    vehicles?: VehicleCreateNestedManyWithoutUserInput
    claims?: ClaimCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    contact_number: string
    email: string
    date_of_birth: Date | string
    role: string
    password: string
    insurancePolicies?: InsurancePolicyUncheckedCreateNestedManyWithoutUserInput
    vehicles?: VehicleUncheckedCreateNestedManyWithoutUserInput
    claims?: ClaimUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    insurancePolicies?: InsurancePolicyUpdateManyWithoutUserNestedInput
    vehicles?: VehicleUpdateManyWithoutUserNestedInput
    claims?: ClaimUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    insurancePolicies?: InsurancePolicyUncheckedUpdateManyWithoutUserNestedInput
    vehicles?: VehicleUncheckedUpdateManyWithoutUserNestedInput
    claims?: ClaimUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    address: string
    contact_number: string
    email: string
    date_of_birth: Date | string
    role: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type InsurancePolicyCreateInput = {
    policy_number?: string
    type: string
    start_date: Date | string
    end_date: Date | string
    amount: number
    status: string
    user: UserCreateNestedOneWithoutInsurancePoliciesInput
    vehicle: VehicleCreateNestedOneWithoutInsurancePoliciesInput
  }

  export type InsurancePolicyUncheckedCreateInput = {
    id?: number
    user_id: number
    vehicle_id: number
    policy_number?: string
    type: string
    start_date: Date | string
    end_date: Date | string
    amount: number
    status: string
  }

  export type InsurancePolicyUpdateInput = {
    policy_number?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutInsurancePoliciesNestedInput
    vehicle?: VehicleUpdateOneRequiredWithoutInsurancePoliciesNestedInput
  }

  export type InsurancePolicyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    vehicle_id?: IntFieldUpdateOperationsInput | number
    policy_number?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type InsurancePolicyCreateManyInput = {
    id?: number
    user_id: number
    vehicle_id: number
    policy_number?: string
    type: string
    start_date: Date | string
    end_date: Date | string
    amount: number
    status: string
  }

  export type InsurancePolicyUpdateManyMutationInput = {
    policy_number?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type InsurancePolicyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    vehicle_id?: IntFieldUpdateOperationsInput | number
    policy_number?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type VehicleCreateInput = {
    make: string
    model: string
    year: number
    license_plate: string
    vin_number: string
    user: UserCreateNestedOneWithoutVehiclesInput
    insurancePolicies?: InsurancePolicyCreateNestedManyWithoutVehicleInput
    accidents?: AccidentCreateNestedManyWithoutVehiclesInput
    AccidentVehicle?: AccidentVehicleCreateNestedManyWithoutVehicleInput
  }

  export type VehicleUncheckedCreateInput = {
    id?: number
    user_id: number
    make: string
    model: string
    year: number
    license_plate: string
    vin_number: string
    insurancePolicies?: InsurancePolicyUncheckedCreateNestedManyWithoutVehicleInput
    accidents?: AccidentUncheckedCreateNestedManyWithoutVehiclesInput
    AccidentVehicle?: AccidentVehicleUncheckedCreateNestedManyWithoutVehicleInput
  }

  export type VehicleUpdateInput = {
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    license_plate?: StringFieldUpdateOperationsInput | string
    vin_number?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutVehiclesNestedInput
    insurancePolicies?: InsurancePolicyUpdateManyWithoutVehicleNestedInput
    accidents?: AccidentUpdateManyWithoutVehiclesNestedInput
    AccidentVehicle?: AccidentVehicleUpdateManyWithoutVehicleNestedInput
  }

  export type VehicleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    license_plate?: StringFieldUpdateOperationsInput | string
    vin_number?: StringFieldUpdateOperationsInput | string
    insurancePolicies?: InsurancePolicyUncheckedUpdateManyWithoutVehicleNestedInput
    accidents?: AccidentUncheckedUpdateManyWithoutVehiclesNestedInput
    AccidentVehicle?: AccidentVehicleUncheckedUpdateManyWithoutVehicleNestedInput
  }

  export type VehicleCreateManyInput = {
    id?: number
    user_id: number
    make: string
    model: string
    year: number
    license_plate: string
    vin_number: string
  }

  export type VehicleUpdateManyMutationInput = {
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    license_plate?: StringFieldUpdateOperationsInput | string
    vin_number?: StringFieldUpdateOperationsInput | string
  }

  export type VehicleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    license_plate?: StringFieldUpdateOperationsInput | string
    vin_number?: StringFieldUpdateOperationsInput | string
  }

  export type AccidentCreateInput = {
    date: Date | string
    location: string
    description: string
    claims?: ClaimCreateNestedManyWithoutAccidentInput
    vehicles?: VehicleCreateNestedManyWithoutAccidentsInput
    AccidentVehicle?: AccidentVehicleCreateNestedManyWithoutAccidentInput
  }

  export type AccidentUncheckedCreateInput = {
    id?: number
    date: Date | string
    location: string
    description: string
    claims?: ClaimUncheckedCreateNestedManyWithoutAccidentInput
    vehicles?: VehicleUncheckedCreateNestedManyWithoutAccidentsInput
    AccidentVehicle?: AccidentVehicleUncheckedCreateNestedManyWithoutAccidentInput
  }

  export type AccidentUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    claims?: ClaimUpdateManyWithoutAccidentNestedInput
    vehicles?: VehicleUpdateManyWithoutAccidentsNestedInput
    AccidentVehicle?: AccidentVehicleUpdateManyWithoutAccidentNestedInput
  }

  export type AccidentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    claims?: ClaimUncheckedUpdateManyWithoutAccidentNestedInput
    vehicles?: VehicleUncheckedUpdateManyWithoutAccidentsNestedInput
    AccidentVehicle?: AccidentVehicleUncheckedUpdateManyWithoutAccidentNestedInput
  }

  export type AccidentCreateManyInput = {
    id?: number
    date: Date | string
    location: string
    description: string
  }

  export type AccidentUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type AccidentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ClaimCreateInput = {
    claim_number: string
    date_submitted: Date | string
    status: string
    description: string
    amount_claimed: number
    user: UserCreateNestedOneWithoutClaimsInput
    accident: AccidentCreateNestedOneWithoutClaimsInput
  }

  export type ClaimUncheckedCreateInput = {
    id?: number
    user_id: number
    accident_id: number
    claim_number: string
    date_submitted: Date | string
    status: string
    description: string
    amount_claimed: number
  }

  export type ClaimUpdateInput = {
    claim_number?: StringFieldUpdateOperationsInput | string
    date_submitted?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount_claimed?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutClaimsNestedInput
    accident?: AccidentUpdateOneRequiredWithoutClaimsNestedInput
  }

  export type ClaimUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    accident_id?: IntFieldUpdateOperationsInput | number
    claim_number?: StringFieldUpdateOperationsInput | string
    date_submitted?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount_claimed?: FloatFieldUpdateOperationsInput | number
  }

  export type ClaimCreateManyInput = {
    id?: number
    user_id: number
    accident_id: number
    claim_number: string
    date_submitted: Date | string
    status: string
    description: string
    amount_claimed: number
  }

  export type ClaimUpdateManyMutationInput = {
    claim_number?: StringFieldUpdateOperationsInput | string
    date_submitted?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount_claimed?: FloatFieldUpdateOperationsInput | number
  }

  export type ClaimUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    accident_id?: IntFieldUpdateOperationsInput | number
    claim_number?: StringFieldUpdateOperationsInput | string
    date_submitted?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount_claimed?: FloatFieldUpdateOperationsInput | number
  }

  export type AccidentVehicleCreateInput = {
    accident: AccidentCreateNestedOneWithoutAccidentVehicleInput
    vehicle: VehicleCreateNestedOneWithoutAccidentVehicleInput
  }

  export type AccidentVehicleUncheckedCreateInput = {
    id?: number
    accident_id: number
    vehicle_id: number
  }

  export type AccidentVehicleUpdateInput = {
    accident?: AccidentUpdateOneRequiredWithoutAccidentVehicleNestedInput
    vehicle?: VehicleUpdateOneRequiredWithoutAccidentVehicleNestedInput
  }

  export type AccidentVehicleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    accident_id?: IntFieldUpdateOperationsInput | number
    vehicle_id?: IntFieldUpdateOperationsInput | number
  }

  export type AccidentVehicleCreateManyInput = {
    id?: number
    accident_id: number
    vehicle_id: number
  }

  export type AccidentVehicleUpdateManyMutationInput = {

  }

  export type AccidentVehicleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    accident_id?: IntFieldUpdateOperationsInput | number
    vehicle_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type InsurancePolicyListRelationFilter = {
    every?: InsurancePolicyWhereInput
    some?: InsurancePolicyWhereInput
    none?: InsurancePolicyWhereInput
  }

  export type VehicleListRelationFilter = {
    every?: VehicleWhereInput
    some?: VehicleWhereInput
    none?: VehicleWhereInput
  }

  export type ClaimListRelationFilter = {
    every?: ClaimWhereInput
    some?: ClaimWhereInput
    none?: ClaimWhereInput
  }

  export type InsurancePolicyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VehicleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClaimOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contact_number?: SortOrder
    email?: SortOrder
    date_of_birth?: SortOrder
    role?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contact_number?: SortOrder
    email?: SortOrder
    date_of_birth?: SortOrder
    role?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contact_number?: SortOrder
    email?: SortOrder
    date_of_birth?: SortOrder
    role?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type VehicleRelationFilter = {
    is?: VehicleWhereInput
    isNot?: VehicleWhereInput
  }

  export type InsurancePolicyCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    vehicle_id?: SortOrder
    policy_number?: SortOrder
    type?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    amount?: SortOrder
    status?: SortOrder
  }

  export type InsurancePolicyAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    vehicle_id?: SortOrder
    amount?: SortOrder
  }

  export type InsurancePolicyMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    vehicle_id?: SortOrder
    policy_number?: SortOrder
    type?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    amount?: SortOrder
    status?: SortOrder
  }

  export type InsurancePolicyMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    vehicle_id?: SortOrder
    policy_number?: SortOrder
    type?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    amount?: SortOrder
    status?: SortOrder
  }

  export type InsurancePolicySumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    vehicle_id?: SortOrder
    amount?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type AccidentListRelationFilter = {
    every?: AccidentWhereInput
    some?: AccidentWhereInput
    none?: AccidentWhereInput
  }

  export type AccidentVehicleListRelationFilter = {
    every?: AccidentVehicleWhereInput
    some?: AccidentVehicleWhereInput
    none?: AccidentVehicleWhereInput
  }

  export type AccidentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccidentVehicleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VehicleCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    make?: SortOrder
    model?: SortOrder
    year?: SortOrder
    license_plate?: SortOrder
    vin_number?: SortOrder
  }

  export type VehicleAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    year?: SortOrder
  }

  export type VehicleMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    make?: SortOrder
    model?: SortOrder
    year?: SortOrder
    license_plate?: SortOrder
    vin_number?: SortOrder
  }

  export type VehicleMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    make?: SortOrder
    model?: SortOrder
    year?: SortOrder
    license_plate?: SortOrder
    vin_number?: SortOrder
  }

  export type VehicleSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    year?: SortOrder
  }

  export type AccidentCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    location?: SortOrder
    description?: SortOrder
  }

  export type AccidentAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AccidentMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    location?: SortOrder
    description?: SortOrder
  }

  export type AccidentMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    location?: SortOrder
    description?: SortOrder
  }

  export type AccidentSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AccidentRelationFilter = {
    is?: AccidentWhereInput
    isNot?: AccidentWhereInput
  }

  export type ClaimCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    accident_id?: SortOrder
    claim_number?: SortOrder
    date_submitted?: SortOrder
    status?: SortOrder
    description?: SortOrder
    amount_claimed?: SortOrder
  }

  export type ClaimAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    accident_id?: SortOrder
    amount_claimed?: SortOrder
  }

  export type ClaimMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    accident_id?: SortOrder
    claim_number?: SortOrder
    date_submitted?: SortOrder
    status?: SortOrder
    description?: SortOrder
    amount_claimed?: SortOrder
  }

  export type ClaimMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    accident_id?: SortOrder
    claim_number?: SortOrder
    date_submitted?: SortOrder
    status?: SortOrder
    description?: SortOrder
    amount_claimed?: SortOrder
  }

  export type ClaimSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    accident_id?: SortOrder
    amount_claimed?: SortOrder
  }

  export type AccidentVehicleCountOrderByAggregateInput = {
    id?: SortOrder
    accident_id?: SortOrder
    vehicle_id?: SortOrder
  }

  export type AccidentVehicleAvgOrderByAggregateInput = {
    id?: SortOrder
    accident_id?: SortOrder
    vehicle_id?: SortOrder
  }

  export type AccidentVehicleMaxOrderByAggregateInput = {
    id?: SortOrder
    accident_id?: SortOrder
    vehicle_id?: SortOrder
  }

  export type AccidentVehicleMinOrderByAggregateInput = {
    id?: SortOrder
    accident_id?: SortOrder
    vehicle_id?: SortOrder
  }

  export type AccidentVehicleSumOrderByAggregateInput = {
    id?: SortOrder
    accident_id?: SortOrder
    vehicle_id?: SortOrder
  }

  export type InsurancePolicyCreateNestedManyWithoutUserInput = {
    create?: XOR<InsurancePolicyCreateWithoutUserInput, InsurancePolicyUncheckedCreateWithoutUserInput> | InsurancePolicyCreateWithoutUserInput[] | InsurancePolicyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InsurancePolicyCreateOrConnectWithoutUserInput | InsurancePolicyCreateOrConnectWithoutUserInput[]
    createMany?: InsurancePolicyCreateManyUserInputEnvelope
    connect?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
  }

  export type VehicleCreateNestedManyWithoutUserInput = {
    create?: XOR<VehicleCreateWithoutUserInput, VehicleUncheckedCreateWithoutUserInput> | VehicleCreateWithoutUserInput[] | VehicleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutUserInput | VehicleCreateOrConnectWithoutUserInput[]
    createMany?: VehicleCreateManyUserInputEnvelope
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
  }

  export type ClaimCreateNestedManyWithoutUserInput = {
    create?: XOR<ClaimCreateWithoutUserInput, ClaimUncheckedCreateWithoutUserInput> | ClaimCreateWithoutUserInput[] | ClaimUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClaimCreateOrConnectWithoutUserInput | ClaimCreateOrConnectWithoutUserInput[]
    createMany?: ClaimCreateManyUserInputEnvelope
    connect?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
  }

  export type InsurancePolicyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InsurancePolicyCreateWithoutUserInput, InsurancePolicyUncheckedCreateWithoutUserInput> | InsurancePolicyCreateWithoutUserInput[] | InsurancePolicyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InsurancePolicyCreateOrConnectWithoutUserInput | InsurancePolicyCreateOrConnectWithoutUserInput[]
    createMany?: InsurancePolicyCreateManyUserInputEnvelope
    connect?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
  }

  export type VehicleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VehicleCreateWithoutUserInput, VehicleUncheckedCreateWithoutUserInput> | VehicleCreateWithoutUserInput[] | VehicleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutUserInput | VehicleCreateOrConnectWithoutUserInput[]
    createMany?: VehicleCreateManyUserInputEnvelope
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
  }

  export type ClaimUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ClaimCreateWithoutUserInput, ClaimUncheckedCreateWithoutUserInput> | ClaimCreateWithoutUserInput[] | ClaimUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClaimCreateOrConnectWithoutUserInput | ClaimCreateOrConnectWithoutUserInput[]
    createMany?: ClaimCreateManyUserInputEnvelope
    connect?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type InsurancePolicyUpdateManyWithoutUserNestedInput = {
    create?: XOR<InsurancePolicyCreateWithoutUserInput, InsurancePolicyUncheckedCreateWithoutUserInput> | InsurancePolicyCreateWithoutUserInput[] | InsurancePolicyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InsurancePolicyCreateOrConnectWithoutUserInput | InsurancePolicyCreateOrConnectWithoutUserInput[]
    upsert?: InsurancePolicyUpsertWithWhereUniqueWithoutUserInput | InsurancePolicyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InsurancePolicyCreateManyUserInputEnvelope
    set?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    disconnect?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    delete?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    connect?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    update?: InsurancePolicyUpdateWithWhereUniqueWithoutUserInput | InsurancePolicyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InsurancePolicyUpdateManyWithWhereWithoutUserInput | InsurancePolicyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InsurancePolicyScalarWhereInput | InsurancePolicyScalarWhereInput[]
  }

  export type VehicleUpdateManyWithoutUserNestedInput = {
    create?: XOR<VehicleCreateWithoutUserInput, VehicleUncheckedCreateWithoutUserInput> | VehicleCreateWithoutUserInput[] | VehicleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutUserInput | VehicleCreateOrConnectWithoutUserInput[]
    upsert?: VehicleUpsertWithWhereUniqueWithoutUserInput | VehicleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VehicleCreateManyUserInputEnvelope
    set?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    disconnect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    delete?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    update?: VehicleUpdateWithWhereUniqueWithoutUserInput | VehicleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VehicleUpdateManyWithWhereWithoutUserInput | VehicleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
  }

  export type ClaimUpdateManyWithoutUserNestedInput = {
    create?: XOR<ClaimCreateWithoutUserInput, ClaimUncheckedCreateWithoutUserInput> | ClaimCreateWithoutUserInput[] | ClaimUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClaimCreateOrConnectWithoutUserInput | ClaimCreateOrConnectWithoutUserInput[]
    upsert?: ClaimUpsertWithWhereUniqueWithoutUserInput | ClaimUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ClaimCreateManyUserInputEnvelope
    set?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    disconnect?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    delete?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    connect?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    update?: ClaimUpdateWithWhereUniqueWithoutUserInput | ClaimUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ClaimUpdateManyWithWhereWithoutUserInput | ClaimUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ClaimScalarWhereInput | ClaimScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type InsurancePolicyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InsurancePolicyCreateWithoutUserInput, InsurancePolicyUncheckedCreateWithoutUserInput> | InsurancePolicyCreateWithoutUserInput[] | InsurancePolicyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InsurancePolicyCreateOrConnectWithoutUserInput | InsurancePolicyCreateOrConnectWithoutUserInput[]
    upsert?: InsurancePolicyUpsertWithWhereUniqueWithoutUserInput | InsurancePolicyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InsurancePolicyCreateManyUserInputEnvelope
    set?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    disconnect?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    delete?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    connect?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    update?: InsurancePolicyUpdateWithWhereUniqueWithoutUserInput | InsurancePolicyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InsurancePolicyUpdateManyWithWhereWithoutUserInput | InsurancePolicyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InsurancePolicyScalarWhereInput | InsurancePolicyScalarWhereInput[]
  }

  export type VehicleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VehicleCreateWithoutUserInput, VehicleUncheckedCreateWithoutUserInput> | VehicleCreateWithoutUserInput[] | VehicleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutUserInput | VehicleCreateOrConnectWithoutUserInput[]
    upsert?: VehicleUpsertWithWhereUniqueWithoutUserInput | VehicleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VehicleCreateManyUserInputEnvelope
    set?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    disconnect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    delete?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    update?: VehicleUpdateWithWhereUniqueWithoutUserInput | VehicleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VehicleUpdateManyWithWhereWithoutUserInput | VehicleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
  }

  export type ClaimUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ClaimCreateWithoutUserInput, ClaimUncheckedCreateWithoutUserInput> | ClaimCreateWithoutUserInput[] | ClaimUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClaimCreateOrConnectWithoutUserInput | ClaimCreateOrConnectWithoutUserInput[]
    upsert?: ClaimUpsertWithWhereUniqueWithoutUserInput | ClaimUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ClaimCreateManyUserInputEnvelope
    set?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    disconnect?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    delete?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    connect?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    update?: ClaimUpdateWithWhereUniqueWithoutUserInput | ClaimUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ClaimUpdateManyWithWhereWithoutUserInput | ClaimUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ClaimScalarWhereInput | ClaimScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutInsurancePoliciesInput = {
    create?: XOR<UserCreateWithoutInsurancePoliciesInput, UserUncheckedCreateWithoutInsurancePoliciesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInsurancePoliciesInput
    connect?: UserWhereUniqueInput
  }

  export type VehicleCreateNestedOneWithoutInsurancePoliciesInput = {
    create?: XOR<VehicleCreateWithoutInsurancePoliciesInput, VehicleUncheckedCreateWithoutInsurancePoliciesInput>
    connectOrCreate?: VehicleCreateOrConnectWithoutInsurancePoliciesInput
    connect?: VehicleWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutInsurancePoliciesNestedInput = {
    create?: XOR<UserCreateWithoutInsurancePoliciesInput, UserUncheckedCreateWithoutInsurancePoliciesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInsurancePoliciesInput
    upsert?: UserUpsertWithoutInsurancePoliciesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInsurancePoliciesInput, UserUpdateWithoutInsurancePoliciesInput>, UserUncheckedUpdateWithoutInsurancePoliciesInput>
  }

  export type VehicleUpdateOneRequiredWithoutInsurancePoliciesNestedInput = {
    create?: XOR<VehicleCreateWithoutInsurancePoliciesInput, VehicleUncheckedCreateWithoutInsurancePoliciesInput>
    connectOrCreate?: VehicleCreateOrConnectWithoutInsurancePoliciesInput
    upsert?: VehicleUpsertWithoutInsurancePoliciesInput
    connect?: VehicleWhereUniqueInput
    update?: XOR<XOR<VehicleUpdateToOneWithWhereWithoutInsurancePoliciesInput, VehicleUpdateWithoutInsurancePoliciesInput>, VehicleUncheckedUpdateWithoutInsurancePoliciesInput>
  }

  export type UserCreateNestedOneWithoutVehiclesInput = {
    create?: XOR<UserCreateWithoutVehiclesInput, UserUncheckedCreateWithoutVehiclesInput>
    connectOrCreate?: UserCreateOrConnectWithoutVehiclesInput
    connect?: UserWhereUniqueInput
  }

  export type InsurancePolicyCreateNestedManyWithoutVehicleInput = {
    create?: XOR<InsurancePolicyCreateWithoutVehicleInput, InsurancePolicyUncheckedCreateWithoutVehicleInput> | InsurancePolicyCreateWithoutVehicleInput[] | InsurancePolicyUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: InsurancePolicyCreateOrConnectWithoutVehicleInput | InsurancePolicyCreateOrConnectWithoutVehicleInput[]
    createMany?: InsurancePolicyCreateManyVehicleInputEnvelope
    connect?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
  }

  export type AccidentCreateNestedManyWithoutVehiclesInput = {
    create?: XOR<AccidentCreateWithoutVehiclesInput, AccidentUncheckedCreateWithoutVehiclesInput> | AccidentCreateWithoutVehiclesInput[] | AccidentUncheckedCreateWithoutVehiclesInput[]
    connectOrCreate?: AccidentCreateOrConnectWithoutVehiclesInput | AccidentCreateOrConnectWithoutVehiclesInput[]
    connect?: AccidentWhereUniqueInput | AccidentWhereUniqueInput[]
  }

  export type AccidentVehicleCreateNestedManyWithoutVehicleInput = {
    create?: XOR<AccidentVehicleCreateWithoutVehicleInput, AccidentVehicleUncheckedCreateWithoutVehicleInput> | AccidentVehicleCreateWithoutVehicleInput[] | AccidentVehicleUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: AccidentVehicleCreateOrConnectWithoutVehicleInput | AccidentVehicleCreateOrConnectWithoutVehicleInput[]
    createMany?: AccidentVehicleCreateManyVehicleInputEnvelope
    connect?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
  }

  export type InsurancePolicyUncheckedCreateNestedManyWithoutVehicleInput = {
    create?: XOR<InsurancePolicyCreateWithoutVehicleInput, InsurancePolicyUncheckedCreateWithoutVehicleInput> | InsurancePolicyCreateWithoutVehicleInput[] | InsurancePolicyUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: InsurancePolicyCreateOrConnectWithoutVehicleInput | InsurancePolicyCreateOrConnectWithoutVehicleInput[]
    createMany?: InsurancePolicyCreateManyVehicleInputEnvelope
    connect?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
  }

  export type AccidentUncheckedCreateNestedManyWithoutVehiclesInput = {
    create?: XOR<AccidentCreateWithoutVehiclesInput, AccidentUncheckedCreateWithoutVehiclesInput> | AccidentCreateWithoutVehiclesInput[] | AccidentUncheckedCreateWithoutVehiclesInput[]
    connectOrCreate?: AccidentCreateOrConnectWithoutVehiclesInput | AccidentCreateOrConnectWithoutVehiclesInput[]
    connect?: AccidentWhereUniqueInput | AccidentWhereUniqueInput[]
  }

  export type AccidentVehicleUncheckedCreateNestedManyWithoutVehicleInput = {
    create?: XOR<AccidentVehicleCreateWithoutVehicleInput, AccidentVehicleUncheckedCreateWithoutVehicleInput> | AccidentVehicleCreateWithoutVehicleInput[] | AccidentVehicleUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: AccidentVehicleCreateOrConnectWithoutVehicleInput | AccidentVehicleCreateOrConnectWithoutVehicleInput[]
    createMany?: AccidentVehicleCreateManyVehicleInputEnvelope
    connect?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutVehiclesNestedInput = {
    create?: XOR<UserCreateWithoutVehiclesInput, UserUncheckedCreateWithoutVehiclesInput>
    connectOrCreate?: UserCreateOrConnectWithoutVehiclesInput
    upsert?: UserUpsertWithoutVehiclesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVehiclesInput, UserUpdateWithoutVehiclesInput>, UserUncheckedUpdateWithoutVehiclesInput>
  }

  export type InsurancePolicyUpdateManyWithoutVehicleNestedInput = {
    create?: XOR<InsurancePolicyCreateWithoutVehicleInput, InsurancePolicyUncheckedCreateWithoutVehicleInput> | InsurancePolicyCreateWithoutVehicleInput[] | InsurancePolicyUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: InsurancePolicyCreateOrConnectWithoutVehicleInput | InsurancePolicyCreateOrConnectWithoutVehicleInput[]
    upsert?: InsurancePolicyUpsertWithWhereUniqueWithoutVehicleInput | InsurancePolicyUpsertWithWhereUniqueWithoutVehicleInput[]
    createMany?: InsurancePolicyCreateManyVehicleInputEnvelope
    set?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    disconnect?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    delete?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    connect?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    update?: InsurancePolicyUpdateWithWhereUniqueWithoutVehicleInput | InsurancePolicyUpdateWithWhereUniqueWithoutVehicleInput[]
    updateMany?: InsurancePolicyUpdateManyWithWhereWithoutVehicleInput | InsurancePolicyUpdateManyWithWhereWithoutVehicleInput[]
    deleteMany?: InsurancePolicyScalarWhereInput | InsurancePolicyScalarWhereInput[]
  }

  export type AccidentUpdateManyWithoutVehiclesNestedInput = {
    create?: XOR<AccidentCreateWithoutVehiclesInput, AccidentUncheckedCreateWithoutVehiclesInput> | AccidentCreateWithoutVehiclesInput[] | AccidentUncheckedCreateWithoutVehiclesInput[]
    connectOrCreate?: AccidentCreateOrConnectWithoutVehiclesInput | AccidentCreateOrConnectWithoutVehiclesInput[]
    upsert?: AccidentUpsertWithWhereUniqueWithoutVehiclesInput | AccidentUpsertWithWhereUniqueWithoutVehiclesInput[]
    set?: AccidentWhereUniqueInput | AccidentWhereUniqueInput[]
    disconnect?: AccidentWhereUniqueInput | AccidentWhereUniqueInput[]
    delete?: AccidentWhereUniqueInput | AccidentWhereUniqueInput[]
    connect?: AccidentWhereUniqueInput | AccidentWhereUniqueInput[]
    update?: AccidentUpdateWithWhereUniqueWithoutVehiclesInput | AccidentUpdateWithWhereUniqueWithoutVehiclesInput[]
    updateMany?: AccidentUpdateManyWithWhereWithoutVehiclesInput | AccidentUpdateManyWithWhereWithoutVehiclesInput[]
    deleteMany?: AccidentScalarWhereInput | AccidentScalarWhereInput[]
  }

  export type AccidentVehicleUpdateManyWithoutVehicleNestedInput = {
    create?: XOR<AccidentVehicleCreateWithoutVehicleInput, AccidentVehicleUncheckedCreateWithoutVehicleInput> | AccidentVehicleCreateWithoutVehicleInput[] | AccidentVehicleUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: AccidentVehicleCreateOrConnectWithoutVehicleInput | AccidentVehicleCreateOrConnectWithoutVehicleInput[]
    upsert?: AccidentVehicleUpsertWithWhereUniqueWithoutVehicleInput | AccidentVehicleUpsertWithWhereUniqueWithoutVehicleInput[]
    createMany?: AccidentVehicleCreateManyVehicleInputEnvelope
    set?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    disconnect?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    delete?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    connect?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    update?: AccidentVehicleUpdateWithWhereUniqueWithoutVehicleInput | AccidentVehicleUpdateWithWhereUniqueWithoutVehicleInput[]
    updateMany?: AccidentVehicleUpdateManyWithWhereWithoutVehicleInput | AccidentVehicleUpdateManyWithWhereWithoutVehicleInput[]
    deleteMany?: AccidentVehicleScalarWhereInput | AccidentVehicleScalarWhereInput[]
  }

  export type InsurancePolicyUncheckedUpdateManyWithoutVehicleNestedInput = {
    create?: XOR<InsurancePolicyCreateWithoutVehicleInput, InsurancePolicyUncheckedCreateWithoutVehicleInput> | InsurancePolicyCreateWithoutVehicleInput[] | InsurancePolicyUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: InsurancePolicyCreateOrConnectWithoutVehicleInput | InsurancePolicyCreateOrConnectWithoutVehicleInput[]
    upsert?: InsurancePolicyUpsertWithWhereUniqueWithoutVehicleInput | InsurancePolicyUpsertWithWhereUniqueWithoutVehicleInput[]
    createMany?: InsurancePolicyCreateManyVehicleInputEnvelope
    set?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    disconnect?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    delete?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    connect?: InsurancePolicyWhereUniqueInput | InsurancePolicyWhereUniqueInput[]
    update?: InsurancePolicyUpdateWithWhereUniqueWithoutVehicleInput | InsurancePolicyUpdateWithWhereUniqueWithoutVehicleInput[]
    updateMany?: InsurancePolicyUpdateManyWithWhereWithoutVehicleInput | InsurancePolicyUpdateManyWithWhereWithoutVehicleInput[]
    deleteMany?: InsurancePolicyScalarWhereInput | InsurancePolicyScalarWhereInput[]
  }

  export type AccidentUncheckedUpdateManyWithoutVehiclesNestedInput = {
    create?: XOR<AccidentCreateWithoutVehiclesInput, AccidentUncheckedCreateWithoutVehiclesInput> | AccidentCreateWithoutVehiclesInput[] | AccidentUncheckedCreateWithoutVehiclesInput[]
    connectOrCreate?: AccidentCreateOrConnectWithoutVehiclesInput | AccidentCreateOrConnectWithoutVehiclesInput[]
    upsert?: AccidentUpsertWithWhereUniqueWithoutVehiclesInput | AccidentUpsertWithWhereUniqueWithoutVehiclesInput[]
    set?: AccidentWhereUniqueInput | AccidentWhereUniqueInput[]
    disconnect?: AccidentWhereUniqueInput | AccidentWhereUniqueInput[]
    delete?: AccidentWhereUniqueInput | AccidentWhereUniqueInput[]
    connect?: AccidentWhereUniqueInput | AccidentWhereUniqueInput[]
    update?: AccidentUpdateWithWhereUniqueWithoutVehiclesInput | AccidentUpdateWithWhereUniqueWithoutVehiclesInput[]
    updateMany?: AccidentUpdateManyWithWhereWithoutVehiclesInput | AccidentUpdateManyWithWhereWithoutVehiclesInput[]
    deleteMany?: AccidentScalarWhereInput | AccidentScalarWhereInput[]
  }

  export type AccidentVehicleUncheckedUpdateManyWithoutVehicleNestedInput = {
    create?: XOR<AccidentVehicleCreateWithoutVehicleInput, AccidentVehicleUncheckedCreateWithoutVehicleInput> | AccidentVehicleCreateWithoutVehicleInput[] | AccidentVehicleUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: AccidentVehicleCreateOrConnectWithoutVehicleInput | AccidentVehicleCreateOrConnectWithoutVehicleInput[]
    upsert?: AccidentVehicleUpsertWithWhereUniqueWithoutVehicleInput | AccidentVehicleUpsertWithWhereUniqueWithoutVehicleInput[]
    createMany?: AccidentVehicleCreateManyVehicleInputEnvelope
    set?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    disconnect?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    delete?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    connect?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    update?: AccidentVehicleUpdateWithWhereUniqueWithoutVehicleInput | AccidentVehicleUpdateWithWhereUniqueWithoutVehicleInput[]
    updateMany?: AccidentVehicleUpdateManyWithWhereWithoutVehicleInput | AccidentVehicleUpdateManyWithWhereWithoutVehicleInput[]
    deleteMany?: AccidentVehicleScalarWhereInput | AccidentVehicleScalarWhereInput[]
  }

  export type ClaimCreateNestedManyWithoutAccidentInput = {
    create?: XOR<ClaimCreateWithoutAccidentInput, ClaimUncheckedCreateWithoutAccidentInput> | ClaimCreateWithoutAccidentInput[] | ClaimUncheckedCreateWithoutAccidentInput[]
    connectOrCreate?: ClaimCreateOrConnectWithoutAccidentInput | ClaimCreateOrConnectWithoutAccidentInput[]
    createMany?: ClaimCreateManyAccidentInputEnvelope
    connect?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
  }

  export type VehicleCreateNestedManyWithoutAccidentsInput = {
    create?: XOR<VehicleCreateWithoutAccidentsInput, VehicleUncheckedCreateWithoutAccidentsInput> | VehicleCreateWithoutAccidentsInput[] | VehicleUncheckedCreateWithoutAccidentsInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutAccidentsInput | VehicleCreateOrConnectWithoutAccidentsInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
  }

  export type AccidentVehicleCreateNestedManyWithoutAccidentInput = {
    create?: XOR<AccidentVehicleCreateWithoutAccidentInput, AccidentVehicleUncheckedCreateWithoutAccidentInput> | AccidentVehicleCreateWithoutAccidentInput[] | AccidentVehicleUncheckedCreateWithoutAccidentInput[]
    connectOrCreate?: AccidentVehicleCreateOrConnectWithoutAccidentInput | AccidentVehicleCreateOrConnectWithoutAccidentInput[]
    createMany?: AccidentVehicleCreateManyAccidentInputEnvelope
    connect?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
  }

  export type ClaimUncheckedCreateNestedManyWithoutAccidentInput = {
    create?: XOR<ClaimCreateWithoutAccidentInput, ClaimUncheckedCreateWithoutAccidentInput> | ClaimCreateWithoutAccidentInput[] | ClaimUncheckedCreateWithoutAccidentInput[]
    connectOrCreate?: ClaimCreateOrConnectWithoutAccidentInput | ClaimCreateOrConnectWithoutAccidentInput[]
    createMany?: ClaimCreateManyAccidentInputEnvelope
    connect?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
  }

  export type VehicleUncheckedCreateNestedManyWithoutAccidentsInput = {
    create?: XOR<VehicleCreateWithoutAccidentsInput, VehicleUncheckedCreateWithoutAccidentsInput> | VehicleCreateWithoutAccidentsInput[] | VehicleUncheckedCreateWithoutAccidentsInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutAccidentsInput | VehicleCreateOrConnectWithoutAccidentsInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
  }

  export type AccidentVehicleUncheckedCreateNestedManyWithoutAccidentInput = {
    create?: XOR<AccidentVehicleCreateWithoutAccidentInput, AccidentVehicleUncheckedCreateWithoutAccidentInput> | AccidentVehicleCreateWithoutAccidentInput[] | AccidentVehicleUncheckedCreateWithoutAccidentInput[]
    connectOrCreate?: AccidentVehicleCreateOrConnectWithoutAccidentInput | AccidentVehicleCreateOrConnectWithoutAccidentInput[]
    createMany?: AccidentVehicleCreateManyAccidentInputEnvelope
    connect?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
  }

  export type ClaimUpdateManyWithoutAccidentNestedInput = {
    create?: XOR<ClaimCreateWithoutAccidentInput, ClaimUncheckedCreateWithoutAccidentInput> | ClaimCreateWithoutAccidentInput[] | ClaimUncheckedCreateWithoutAccidentInput[]
    connectOrCreate?: ClaimCreateOrConnectWithoutAccidentInput | ClaimCreateOrConnectWithoutAccidentInput[]
    upsert?: ClaimUpsertWithWhereUniqueWithoutAccidentInput | ClaimUpsertWithWhereUniqueWithoutAccidentInput[]
    createMany?: ClaimCreateManyAccidentInputEnvelope
    set?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    disconnect?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    delete?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    connect?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    update?: ClaimUpdateWithWhereUniqueWithoutAccidentInput | ClaimUpdateWithWhereUniqueWithoutAccidentInput[]
    updateMany?: ClaimUpdateManyWithWhereWithoutAccidentInput | ClaimUpdateManyWithWhereWithoutAccidentInput[]
    deleteMany?: ClaimScalarWhereInput | ClaimScalarWhereInput[]
  }

  export type VehicleUpdateManyWithoutAccidentsNestedInput = {
    create?: XOR<VehicleCreateWithoutAccidentsInput, VehicleUncheckedCreateWithoutAccidentsInput> | VehicleCreateWithoutAccidentsInput[] | VehicleUncheckedCreateWithoutAccidentsInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutAccidentsInput | VehicleCreateOrConnectWithoutAccidentsInput[]
    upsert?: VehicleUpsertWithWhereUniqueWithoutAccidentsInput | VehicleUpsertWithWhereUniqueWithoutAccidentsInput[]
    set?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    disconnect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    delete?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    update?: VehicleUpdateWithWhereUniqueWithoutAccidentsInput | VehicleUpdateWithWhereUniqueWithoutAccidentsInput[]
    updateMany?: VehicleUpdateManyWithWhereWithoutAccidentsInput | VehicleUpdateManyWithWhereWithoutAccidentsInput[]
    deleteMany?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
  }

  export type AccidentVehicleUpdateManyWithoutAccidentNestedInput = {
    create?: XOR<AccidentVehicleCreateWithoutAccidentInput, AccidentVehicleUncheckedCreateWithoutAccidentInput> | AccidentVehicleCreateWithoutAccidentInput[] | AccidentVehicleUncheckedCreateWithoutAccidentInput[]
    connectOrCreate?: AccidentVehicleCreateOrConnectWithoutAccidentInput | AccidentVehicleCreateOrConnectWithoutAccidentInput[]
    upsert?: AccidentVehicleUpsertWithWhereUniqueWithoutAccidentInput | AccidentVehicleUpsertWithWhereUniqueWithoutAccidentInput[]
    createMany?: AccidentVehicleCreateManyAccidentInputEnvelope
    set?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    disconnect?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    delete?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    connect?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    update?: AccidentVehicleUpdateWithWhereUniqueWithoutAccidentInput | AccidentVehicleUpdateWithWhereUniqueWithoutAccidentInput[]
    updateMany?: AccidentVehicleUpdateManyWithWhereWithoutAccidentInput | AccidentVehicleUpdateManyWithWhereWithoutAccidentInput[]
    deleteMany?: AccidentVehicleScalarWhereInput | AccidentVehicleScalarWhereInput[]
  }

  export type ClaimUncheckedUpdateManyWithoutAccidentNestedInput = {
    create?: XOR<ClaimCreateWithoutAccidentInput, ClaimUncheckedCreateWithoutAccidentInput> | ClaimCreateWithoutAccidentInput[] | ClaimUncheckedCreateWithoutAccidentInput[]
    connectOrCreate?: ClaimCreateOrConnectWithoutAccidentInput | ClaimCreateOrConnectWithoutAccidentInput[]
    upsert?: ClaimUpsertWithWhereUniqueWithoutAccidentInput | ClaimUpsertWithWhereUniqueWithoutAccidentInput[]
    createMany?: ClaimCreateManyAccidentInputEnvelope
    set?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    disconnect?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    delete?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    connect?: ClaimWhereUniqueInput | ClaimWhereUniqueInput[]
    update?: ClaimUpdateWithWhereUniqueWithoutAccidentInput | ClaimUpdateWithWhereUniqueWithoutAccidentInput[]
    updateMany?: ClaimUpdateManyWithWhereWithoutAccidentInput | ClaimUpdateManyWithWhereWithoutAccidentInput[]
    deleteMany?: ClaimScalarWhereInput | ClaimScalarWhereInput[]
  }

  export type VehicleUncheckedUpdateManyWithoutAccidentsNestedInput = {
    create?: XOR<VehicleCreateWithoutAccidentsInput, VehicleUncheckedCreateWithoutAccidentsInput> | VehicleCreateWithoutAccidentsInput[] | VehicleUncheckedCreateWithoutAccidentsInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutAccidentsInput | VehicleCreateOrConnectWithoutAccidentsInput[]
    upsert?: VehicleUpsertWithWhereUniqueWithoutAccidentsInput | VehicleUpsertWithWhereUniqueWithoutAccidentsInput[]
    set?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    disconnect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    delete?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    update?: VehicleUpdateWithWhereUniqueWithoutAccidentsInput | VehicleUpdateWithWhereUniqueWithoutAccidentsInput[]
    updateMany?: VehicleUpdateManyWithWhereWithoutAccidentsInput | VehicleUpdateManyWithWhereWithoutAccidentsInput[]
    deleteMany?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
  }

  export type AccidentVehicleUncheckedUpdateManyWithoutAccidentNestedInput = {
    create?: XOR<AccidentVehicleCreateWithoutAccidentInput, AccidentVehicleUncheckedCreateWithoutAccidentInput> | AccidentVehicleCreateWithoutAccidentInput[] | AccidentVehicleUncheckedCreateWithoutAccidentInput[]
    connectOrCreate?: AccidentVehicleCreateOrConnectWithoutAccidentInput | AccidentVehicleCreateOrConnectWithoutAccidentInput[]
    upsert?: AccidentVehicleUpsertWithWhereUniqueWithoutAccidentInput | AccidentVehicleUpsertWithWhereUniqueWithoutAccidentInput[]
    createMany?: AccidentVehicleCreateManyAccidentInputEnvelope
    set?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    disconnect?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    delete?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    connect?: AccidentVehicleWhereUniqueInput | AccidentVehicleWhereUniqueInput[]
    update?: AccidentVehicleUpdateWithWhereUniqueWithoutAccidentInput | AccidentVehicleUpdateWithWhereUniqueWithoutAccidentInput[]
    updateMany?: AccidentVehicleUpdateManyWithWhereWithoutAccidentInput | AccidentVehicleUpdateManyWithWhereWithoutAccidentInput[]
    deleteMany?: AccidentVehicleScalarWhereInput | AccidentVehicleScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutClaimsInput = {
    create?: XOR<UserCreateWithoutClaimsInput, UserUncheckedCreateWithoutClaimsInput>
    connectOrCreate?: UserCreateOrConnectWithoutClaimsInput
    connect?: UserWhereUniqueInput
  }

  export type AccidentCreateNestedOneWithoutClaimsInput = {
    create?: XOR<AccidentCreateWithoutClaimsInput, AccidentUncheckedCreateWithoutClaimsInput>
    connectOrCreate?: AccidentCreateOrConnectWithoutClaimsInput
    connect?: AccidentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutClaimsNestedInput = {
    create?: XOR<UserCreateWithoutClaimsInput, UserUncheckedCreateWithoutClaimsInput>
    connectOrCreate?: UserCreateOrConnectWithoutClaimsInput
    upsert?: UserUpsertWithoutClaimsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutClaimsInput, UserUpdateWithoutClaimsInput>, UserUncheckedUpdateWithoutClaimsInput>
  }

  export type AccidentUpdateOneRequiredWithoutClaimsNestedInput = {
    create?: XOR<AccidentCreateWithoutClaimsInput, AccidentUncheckedCreateWithoutClaimsInput>
    connectOrCreate?: AccidentCreateOrConnectWithoutClaimsInput
    upsert?: AccidentUpsertWithoutClaimsInput
    connect?: AccidentWhereUniqueInput
    update?: XOR<XOR<AccidentUpdateToOneWithWhereWithoutClaimsInput, AccidentUpdateWithoutClaimsInput>, AccidentUncheckedUpdateWithoutClaimsInput>
  }

  export type AccidentCreateNestedOneWithoutAccidentVehicleInput = {
    create?: XOR<AccidentCreateWithoutAccidentVehicleInput, AccidentUncheckedCreateWithoutAccidentVehicleInput>
    connectOrCreate?: AccidentCreateOrConnectWithoutAccidentVehicleInput
    connect?: AccidentWhereUniqueInput
  }

  export type VehicleCreateNestedOneWithoutAccidentVehicleInput = {
    create?: XOR<VehicleCreateWithoutAccidentVehicleInput, VehicleUncheckedCreateWithoutAccidentVehicleInput>
    connectOrCreate?: VehicleCreateOrConnectWithoutAccidentVehicleInput
    connect?: VehicleWhereUniqueInput
  }

  export type AccidentUpdateOneRequiredWithoutAccidentVehicleNestedInput = {
    create?: XOR<AccidentCreateWithoutAccidentVehicleInput, AccidentUncheckedCreateWithoutAccidentVehicleInput>
    connectOrCreate?: AccidentCreateOrConnectWithoutAccidentVehicleInput
    upsert?: AccidentUpsertWithoutAccidentVehicleInput
    connect?: AccidentWhereUniqueInput
    update?: XOR<XOR<AccidentUpdateToOneWithWhereWithoutAccidentVehicleInput, AccidentUpdateWithoutAccidentVehicleInput>, AccidentUncheckedUpdateWithoutAccidentVehicleInput>
  }

  export type VehicleUpdateOneRequiredWithoutAccidentVehicleNestedInput = {
    create?: XOR<VehicleCreateWithoutAccidentVehicleInput, VehicleUncheckedCreateWithoutAccidentVehicleInput>
    connectOrCreate?: VehicleCreateOrConnectWithoutAccidentVehicleInput
    upsert?: VehicleUpsertWithoutAccidentVehicleInput
    connect?: VehicleWhereUniqueInput
    update?: XOR<XOR<VehicleUpdateToOneWithWhereWithoutAccidentVehicleInput, VehicleUpdateWithoutAccidentVehicleInput>, VehicleUncheckedUpdateWithoutAccidentVehicleInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type InsurancePolicyCreateWithoutUserInput = {
    policy_number?: string
    type: string
    start_date: Date | string
    end_date: Date | string
    amount: number
    status: string
    vehicle: VehicleCreateNestedOneWithoutInsurancePoliciesInput
  }

  export type InsurancePolicyUncheckedCreateWithoutUserInput = {
    id?: number
    vehicle_id: number
    policy_number?: string
    type: string
    start_date: Date | string
    end_date: Date | string
    amount: number
    status: string
  }

  export type InsurancePolicyCreateOrConnectWithoutUserInput = {
    where: InsurancePolicyWhereUniqueInput
    create: XOR<InsurancePolicyCreateWithoutUserInput, InsurancePolicyUncheckedCreateWithoutUserInput>
  }

  export type InsurancePolicyCreateManyUserInputEnvelope = {
    data: InsurancePolicyCreateManyUserInput | InsurancePolicyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VehicleCreateWithoutUserInput = {
    make: string
    model: string
    year: number
    license_plate: string
    vin_number: string
    insurancePolicies?: InsurancePolicyCreateNestedManyWithoutVehicleInput
    accidents?: AccidentCreateNestedManyWithoutVehiclesInput
    AccidentVehicle?: AccidentVehicleCreateNestedManyWithoutVehicleInput
  }

  export type VehicleUncheckedCreateWithoutUserInput = {
    id?: number
    make: string
    model: string
    year: number
    license_plate: string
    vin_number: string
    insurancePolicies?: InsurancePolicyUncheckedCreateNestedManyWithoutVehicleInput
    accidents?: AccidentUncheckedCreateNestedManyWithoutVehiclesInput
    AccidentVehicle?: AccidentVehicleUncheckedCreateNestedManyWithoutVehicleInput
  }

  export type VehicleCreateOrConnectWithoutUserInput = {
    where: VehicleWhereUniqueInput
    create: XOR<VehicleCreateWithoutUserInput, VehicleUncheckedCreateWithoutUserInput>
  }

  export type VehicleCreateManyUserInputEnvelope = {
    data: VehicleCreateManyUserInput | VehicleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ClaimCreateWithoutUserInput = {
    claim_number: string
    date_submitted: Date | string
    status: string
    description: string
    amount_claimed: number
    accident: AccidentCreateNestedOneWithoutClaimsInput
  }

  export type ClaimUncheckedCreateWithoutUserInput = {
    id?: number
    accident_id: number
    claim_number: string
    date_submitted: Date | string
    status: string
    description: string
    amount_claimed: number
  }

  export type ClaimCreateOrConnectWithoutUserInput = {
    where: ClaimWhereUniqueInput
    create: XOR<ClaimCreateWithoutUserInput, ClaimUncheckedCreateWithoutUserInput>
  }

  export type ClaimCreateManyUserInputEnvelope = {
    data: ClaimCreateManyUserInput | ClaimCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InsurancePolicyUpsertWithWhereUniqueWithoutUserInput = {
    where: InsurancePolicyWhereUniqueInput
    update: XOR<InsurancePolicyUpdateWithoutUserInput, InsurancePolicyUncheckedUpdateWithoutUserInput>
    create: XOR<InsurancePolicyCreateWithoutUserInput, InsurancePolicyUncheckedCreateWithoutUserInput>
  }

  export type InsurancePolicyUpdateWithWhereUniqueWithoutUserInput = {
    where: InsurancePolicyWhereUniqueInput
    data: XOR<InsurancePolicyUpdateWithoutUserInput, InsurancePolicyUncheckedUpdateWithoutUserInput>
  }

  export type InsurancePolicyUpdateManyWithWhereWithoutUserInput = {
    where: InsurancePolicyScalarWhereInput
    data: XOR<InsurancePolicyUpdateManyMutationInput, InsurancePolicyUncheckedUpdateManyWithoutUserInput>
  }

  export type InsurancePolicyScalarWhereInput = {
    AND?: InsurancePolicyScalarWhereInput | InsurancePolicyScalarWhereInput[]
    OR?: InsurancePolicyScalarWhereInput[]
    NOT?: InsurancePolicyScalarWhereInput | InsurancePolicyScalarWhereInput[]
    id?: IntFilter<"InsurancePolicy"> | number
    user_id?: IntFilter<"InsurancePolicy"> | number
    vehicle_id?: IntFilter<"InsurancePolicy"> | number
    policy_number?: StringFilter<"InsurancePolicy"> | string
    type?: StringFilter<"InsurancePolicy"> | string
    start_date?: DateTimeFilter<"InsurancePolicy"> | Date | string
    end_date?: DateTimeFilter<"InsurancePolicy"> | Date | string
    amount?: FloatFilter<"InsurancePolicy"> | number
    status?: StringFilter<"InsurancePolicy"> | string
  }

  export type VehicleUpsertWithWhereUniqueWithoutUserInput = {
    where: VehicleWhereUniqueInput
    update: XOR<VehicleUpdateWithoutUserInput, VehicleUncheckedUpdateWithoutUserInput>
    create: XOR<VehicleCreateWithoutUserInput, VehicleUncheckedCreateWithoutUserInput>
  }

  export type VehicleUpdateWithWhereUniqueWithoutUserInput = {
    where: VehicleWhereUniqueInput
    data: XOR<VehicleUpdateWithoutUserInput, VehicleUncheckedUpdateWithoutUserInput>
  }

  export type VehicleUpdateManyWithWhereWithoutUserInput = {
    where: VehicleScalarWhereInput
    data: XOR<VehicleUpdateManyMutationInput, VehicleUncheckedUpdateManyWithoutUserInput>
  }

  export type VehicleScalarWhereInput = {
    AND?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
    OR?: VehicleScalarWhereInput[]
    NOT?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
    id?: IntFilter<"Vehicle"> | number
    user_id?: IntFilter<"Vehicle"> | number
    make?: StringFilter<"Vehicle"> | string
    model?: StringFilter<"Vehicle"> | string
    year?: IntFilter<"Vehicle"> | number
    license_plate?: StringFilter<"Vehicle"> | string
    vin_number?: StringFilter<"Vehicle"> | string
  }

  export type ClaimUpsertWithWhereUniqueWithoutUserInput = {
    where: ClaimWhereUniqueInput
    update: XOR<ClaimUpdateWithoutUserInput, ClaimUncheckedUpdateWithoutUserInput>
    create: XOR<ClaimCreateWithoutUserInput, ClaimUncheckedCreateWithoutUserInput>
  }

  export type ClaimUpdateWithWhereUniqueWithoutUserInput = {
    where: ClaimWhereUniqueInput
    data: XOR<ClaimUpdateWithoutUserInput, ClaimUncheckedUpdateWithoutUserInput>
  }

  export type ClaimUpdateManyWithWhereWithoutUserInput = {
    where: ClaimScalarWhereInput
    data: XOR<ClaimUpdateManyMutationInput, ClaimUncheckedUpdateManyWithoutUserInput>
  }

  export type ClaimScalarWhereInput = {
    AND?: ClaimScalarWhereInput | ClaimScalarWhereInput[]
    OR?: ClaimScalarWhereInput[]
    NOT?: ClaimScalarWhereInput | ClaimScalarWhereInput[]
    id?: IntFilter<"Claim"> | number
    user_id?: IntFilter<"Claim"> | number
    accident_id?: IntFilter<"Claim"> | number
    claim_number?: StringFilter<"Claim"> | string
    date_submitted?: DateTimeFilter<"Claim"> | Date | string
    status?: StringFilter<"Claim"> | string
    description?: StringFilter<"Claim"> | string
    amount_claimed?: FloatFilter<"Claim"> | number
  }

  export type UserCreateWithoutInsurancePoliciesInput = {
    name: string
    address: string
    contact_number: string
    email: string
    date_of_birth: Date | string
    role: string
    password: string
    vehicles?: VehicleCreateNestedManyWithoutUserInput
    claims?: ClaimCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInsurancePoliciesInput = {
    id?: number
    name: string
    address: string
    contact_number: string
    email: string
    date_of_birth: Date | string
    role: string
    password: string
    vehicles?: VehicleUncheckedCreateNestedManyWithoutUserInput
    claims?: ClaimUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInsurancePoliciesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInsurancePoliciesInput, UserUncheckedCreateWithoutInsurancePoliciesInput>
  }

  export type VehicleCreateWithoutInsurancePoliciesInput = {
    make: string
    model: string
    year: number
    license_plate: string
    vin_number: string
    user: UserCreateNestedOneWithoutVehiclesInput
    accidents?: AccidentCreateNestedManyWithoutVehiclesInput
    AccidentVehicle?: AccidentVehicleCreateNestedManyWithoutVehicleInput
  }

  export type VehicleUncheckedCreateWithoutInsurancePoliciesInput = {
    id?: number
    user_id: number
    make: string
    model: string
    year: number
    license_plate: string
    vin_number: string
    accidents?: AccidentUncheckedCreateNestedManyWithoutVehiclesInput
    AccidentVehicle?: AccidentVehicleUncheckedCreateNestedManyWithoutVehicleInput
  }

  export type VehicleCreateOrConnectWithoutInsurancePoliciesInput = {
    where: VehicleWhereUniqueInput
    create: XOR<VehicleCreateWithoutInsurancePoliciesInput, VehicleUncheckedCreateWithoutInsurancePoliciesInput>
  }

  export type UserUpsertWithoutInsurancePoliciesInput = {
    update: XOR<UserUpdateWithoutInsurancePoliciesInput, UserUncheckedUpdateWithoutInsurancePoliciesInput>
    create: XOR<UserCreateWithoutInsurancePoliciesInput, UserUncheckedCreateWithoutInsurancePoliciesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInsurancePoliciesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInsurancePoliciesInput, UserUncheckedUpdateWithoutInsurancePoliciesInput>
  }

  export type UserUpdateWithoutInsurancePoliciesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vehicles?: VehicleUpdateManyWithoutUserNestedInput
    claims?: ClaimUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInsurancePoliciesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vehicles?: VehicleUncheckedUpdateManyWithoutUserNestedInput
    claims?: ClaimUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VehicleUpsertWithoutInsurancePoliciesInput = {
    update: XOR<VehicleUpdateWithoutInsurancePoliciesInput, VehicleUncheckedUpdateWithoutInsurancePoliciesInput>
    create: XOR<VehicleCreateWithoutInsurancePoliciesInput, VehicleUncheckedCreateWithoutInsurancePoliciesInput>
    where?: VehicleWhereInput
  }

  export type VehicleUpdateToOneWithWhereWithoutInsurancePoliciesInput = {
    where?: VehicleWhereInput
    data: XOR<VehicleUpdateWithoutInsurancePoliciesInput, VehicleUncheckedUpdateWithoutInsurancePoliciesInput>
  }

  export type VehicleUpdateWithoutInsurancePoliciesInput = {
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    license_plate?: StringFieldUpdateOperationsInput | string
    vin_number?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutVehiclesNestedInput
    accidents?: AccidentUpdateManyWithoutVehiclesNestedInput
    AccidentVehicle?: AccidentVehicleUpdateManyWithoutVehicleNestedInput
  }

  export type VehicleUncheckedUpdateWithoutInsurancePoliciesInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    license_plate?: StringFieldUpdateOperationsInput | string
    vin_number?: StringFieldUpdateOperationsInput | string
    accidents?: AccidentUncheckedUpdateManyWithoutVehiclesNestedInput
    AccidentVehicle?: AccidentVehicleUncheckedUpdateManyWithoutVehicleNestedInput
  }

  export type UserCreateWithoutVehiclesInput = {
    name: string
    address: string
    contact_number: string
    email: string
    date_of_birth: Date | string
    role: string
    password: string
    insurancePolicies?: InsurancePolicyCreateNestedManyWithoutUserInput
    claims?: ClaimCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVehiclesInput = {
    id?: number
    name: string
    address: string
    contact_number: string
    email: string
    date_of_birth: Date | string
    role: string
    password: string
    insurancePolicies?: InsurancePolicyUncheckedCreateNestedManyWithoutUserInput
    claims?: ClaimUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVehiclesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVehiclesInput, UserUncheckedCreateWithoutVehiclesInput>
  }

  export type InsurancePolicyCreateWithoutVehicleInput = {
    policy_number?: string
    type: string
    start_date: Date | string
    end_date: Date | string
    amount: number
    status: string
    user: UserCreateNestedOneWithoutInsurancePoliciesInput
  }

  export type InsurancePolicyUncheckedCreateWithoutVehicleInput = {
    id?: number
    user_id: number
    policy_number?: string
    type: string
    start_date: Date | string
    end_date: Date | string
    amount: number
    status: string
  }

  export type InsurancePolicyCreateOrConnectWithoutVehicleInput = {
    where: InsurancePolicyWhereUniqueInput
    create: XOR<InsurancePolicyCreateWithoutVehicleInput, InsurancePolicyUncheckedCreateWithoutVehicleInput>
  }

  export type InsurancePolicyCreateManyVehicleInputEnvelope = {
    data: InsurancePolicyCreateManyVehicleInput | InsurancePolicyCreateManyVehicleInput[]
    skipDuplicates?: boolean
  }

  export type AccidentCreateWithoutVehiclesInput = {
    date: Date | string
    location: string
    description: string
    claims?: ClaimCreateNestedManyWithoutAccidentInput
    AccidentVehicle?: AccidentVehicleCreateNestedManyWithoutAccidentInput
  }

  export type AccidentUncheckedCreateWithoutVehiclesInput = {
    id?: number
    date: Date | string
    location: string
    description: string
    claims?: ClaimUncheckedCreateNestedManyWithoutAccidentInput
    AccidentVehicle?: AccidentVehicleUncheckedCreateNestedManyWithoutAccidentInput
  }

  export type AccidentCreateOrConnectWithoutVehiclesInput = {
    where: AccidentWhereUniqueInput
    create: XOR<AccidentCreateWithoutVehiclesInput, AccidentUncheckedCreateWithoutVehiclesInput>
  }

  export type AccidentVehicleCreateWithoutVehicleInput = {
    accident: AccidentCreateNestedOneWithoutAccidentVehicleInput
  }

  export type AccidentVehicleUncheckedCreateWithoutVehicleInput = {
    id?: number
    accident_id: number
  }

  export type AccidentVehicleCreateOrConnectWithoutVehicleInput = {
    where: AccidentVehicleWhereUniqueInput
    create: XOR<AccidentVehicleCreateWithoutVehicleInput, AccidentVehicleUncheckedCreateWithoutVehicleInput>
  }

  export type AccidentVehicleCreateManyVehicleInputEnvelope = {
    data: AccidentVehicleCreateManyVehicleInput | AccidentVehicleCreateManyVehicleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutVehiclesInput = {
    update: XOR<UserUpdateWithoutVehiclesInput, UserUncheckedUpdateWithoutVehiclesInput>
    create: XOR<UserCreateWithoutVehiclesInput, UserUncheckedCreateWithoutVehiclesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVehiclesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVehiclesInput, UserUncheckedUpdateWithoutVehiclesInput>
  }

  export type UserUpdateWithoutVehiclesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    insurancePolicies?: InsurancePolicyUpdateManyWithoutUserNestedInput
    claims?: ClaimUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVehiclesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    insurancePolicies?: InsurancePolicyUncheckedUpdateManyWithoutUserNestedInput
    claims?: ClaimUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InsurancePolicyUpsertWithWhereUniqueWithoutVehicleInput = {
    where: InsurancePolicyWhereUniqueInput
    update: XOR<InsurancePolicyUpdateWithoutVehicleInput, InsurancePolicyUncheckedUpdateWithoutVehicleInput>
    create: XOR<InsurancePolicyCreateWithoutVehicleInput, InsurancePolicyUncheckedCreateWithoutVehicleInput>
  }

  export type InsurancePolicyUpdateWithWhereUniqueWithoutVehicleInput = {
    where: InsurancePolicyWhereUniqueInput
    data: XOR<InsurancePolicyUpdateWithoutVehicleInput, InsurancePolicyUncheckedUpdateWithoutVehicleInput>
  }

  export type InsurancePolicyUpdateManyWithWhereWithoutVehicleInput = {
    where: InsurancePolicyScalarWhereInput
    data: XOR<InsurancePolicyUpdateManyMutationInput, InsurancePolicyUncheckedUpdateManyWithoutVehicleInput>
  }

  export type AccidentUpsertWithWhereUniqueWithoutVehiclesInput = {
    where: AccidentWhereUniqueInput
    update: XOR<AccidentUpdateWithoutVehiclesInput, AccidentUncheckedUpdateWithoutVehiclesInput>
    create: XOR<AccidentCreateWithoutVehiclesInput, AccidentUncheckedCreateWithoutVehiclesInput>
  }

  export type AccidentUpdateWithWhereUniqueWithoutVehiclesInput = {
    where: AccidentWhereUniqueInput
    data: XOR<AccidentUpdateWithoutVehiclesInput, AccidentUncheckedUpdateWithoutVehiclesInput>
  }

  export type AccidentUpdateManyWithWhereWithoutVehiclesInput = {
    where: AccidentScalarWhereInput
    data: XOR<AccidentUpdateManyMutationInput, AccidentUncheckedUpdateManyWithoutVehiclesInput>
  }

  export type AccidentScalarWhereInput = {
    AND?: AccidentScalarWhereInput | AccidentScalarWhereInput[]
    OR?: AccidentScalarWhereInput[]
    NOT?: AccidentScalarWhereInput | AccidentScalarWhereInput[]
    id?: IntFilter<"Accident"> | number
    date?: DateTimeFilter<"Accident"> | Date | string
    location?: StringFilter<"Accident"> | string
    description?: StringFilter<"Accident"> | string
  }

  export type AccidentVehicleUpsertWithWhereUniqueWithoutVehicleInput = {
    where: AccidentVehicleWhereUniqueInput
    update: XOR<AccidentVehicleUpdateWithoutVehicleInput, AccidentVehicleUncheckedUpdateWithoutVehicleInput>
    create: XOR<AccidentVehicleCreateWithoutVehicleInput, AccidentVehicleUncheckedCreateWithoutVehicleInput>
  }

  export type AccidentVehicleUpdateWithWhereUniqueWithoutVehicleInput = {
    where: AccidentVehicleWhereUniqueInput
    data: XOR<AccidentVehicleUpdateWithoutVehicleInput, AccidentVehicleUncheckedUpdateWithoutVehicleInput>
  }

  export type AccidentVehicleUpdateManyWithWhereWithoutVehicleInput = {
    where: AccidentVehicleScalarWhereInput
    data: XOR<AccidentVehicleUpdateManyMutationInput, AccidentVehicleUncheckedUpdateManyWithoutVehicleInput>
  }

  export type AccidentVehicleScalarWhereInput = {
    AND?: AccidentVehicleScalarWhereInput | AccidentVehicleScalarWhereInput[]
    OR?: AccidentVehicleScalarWhereInput[]
    NOT?: AccidentVehicleScalarWhereInput | AccidentVehicleScalarWhereInput[]
    id?: IntFilter<"AccidentVehicle"> | number
    accident_id?: IntFilter<"AccidentVehicle"> | number
    vehicle_id?: IntFilter<"AccidentVehicle"> | number
  }

  export type ClaimCreateWithoutAccidentInput = {
    claim_number: string
    date_submitted: Date | string
    status: string
    description: string
    amount_claimed: number
    user: UserCreateNestedOneWithoutClaimsInput
  }

  export type ClaimUncheckedCreateWithoutAccidentInput = {
    id?: number
    user_id: number
    claim_number: string
    date_submitted: Date | string
    status: string
    description: string
    amount_claimed: number
  }

  export type ClaimCreateOrConnectWithoutAccidentInput = {
    where: ClaimWhereUniqueInput
    create: XOR<ClaimCreateWithoutAccidentInput, ClaimUncheckedCreateWithoutAccidentInput>
  }

  export type ClaimCreateManyAccidentInputEnvelope = {
    data: ClaimCreateManyAccidentInput | ClaimCreateManyAccidentInput[]
    skipDuplicates?: boolean
  }

  export type VehicleCreateWithoutAccidentsInput = {
    make: string
    model: string
    year: number
    license_plate: string
    vin_number: string
    user: UserCreateNestedOneWithoutVehiclesInput
    insurancePolicies?: InsurancePolicyCreateNestedManyWithoutVehicleInput
    AccidentVehicle?: AccidentVehicleCreateNestedManyWithoutVehicleInput
  }

  export type VehicleUncheckedCreateWithoutAccidentsInput = {
    id?: number
    user_id: number
    make: string
    model: string
    year: number
    license_plate: string
    vin_number: string
    insurancePolicies?: InsurancePolicyUncheckedCreateNestedManyWithoutVehicleInput
    AccidentVehicle?: AccidentVehicleUncheckedCreateNestedManyWithoutVehicleInput
  }

  export type VehicleCreateOrConnectWithoutAccidentsInput = {
    where: VehicleWhereUniqueInput
    create: XOR<VehicleCreateWithoutAccidentsInput, VehicleUncheckedCreateWithoutAccidentsInput>
  }

  export type AccidentVehicleCreateWithoutAccidentInput = {
    vehicle: VehicleCreateNestedOneWithoutAccidentVehicleInput
  }

  export type AccidentVehicleUncheckedCreateWithoutAccidentInput = {
    id?: number
    vehicle_id: number
  }

  export type AccidentVehicleCreateOrConnectWithoutAccidentInput = {
    where: AccidentVehicleWhereUniqueInput
    create: XOR<AccidentVehicleCreateWithoutAccidentInput, AccidentVehicleUncheckedCreateWithoutAccidentInput>
  }

  export type AccidentVehicleCreateManyAccidentInputEnvelope = {
    data: AccidentVehicleCreateManyAccidentInput | AccidentVehicleCreateManyAccidentInput[]
    skipDuplicates?: boolean
  }

  export type ClaimUpsertWithWhereUniqueWithoutAccidentInput = {
    where: ClaimWhereUniqueInput
    update: XOR<ClaimUpdateWithoutAccidentInput, ClaimUncheckedUpdateWithoutAccidentInput>
    create: XOR<ClaimCreateWithoutAccidentInput, ClaimUncheckedCreateWithoutAccidentInput>
  }

  export type ClaimUpdateWithWhereUniqueWithoutAccidentInput = {
    where: ClaimWhereUniqueInput
    data: XOR<ClaimUpdateWithoutAccidentInput, ClaimUncheckedUpdateWithoutAccidentInput>
  }

  export type ClaimUpdateManyWithWhereWithoutAccidentInput = {
    where: ClaimScalarWhereInput
    data: XOR<ClaimUpdateManyMutationInput, ClaimUncheckedUpdateManyWithoutAccidentInput>
  }

  export type VehicleUpsertWithWhereUniqueWithoutAccidentsInput = {
    where: VehicleWhereUniqueInput
    update: XOR<VehicleUpdateWithoutAccidentsInput, VehicleUncheckedUpdateWithoutAccidentsInput>
    create: XOR<VehicleCreateWithoutAccidentsInput, VehicleUncheckedCreateWithoutAccidentsInput>
  }

  export type VehicleUpdateWithWhereUniqueWithoutAccidentsInput = {
    where: VehicleWhereUniqueInput
    data: XOR<VehicleUpdateWithoutAccidentsInput, VehicleUncheckedUpdateWithoutAccidentsInput>
  }

  export type VehicleUpdateManyWithWhereWithoutAccidentsInput = {
    where: VehicleScalarWhereInput
    data: XOR<VehicleUpdateManyMutationInput, VehicleUncheckedUpdateManyWithoutAccidentsInput>
  }

  export type AccidentVehicleUpsertWithWhereUniqueWithoutAccidentInput = {
    where: AccidentVehicleWhereUniqueInput
    update: XOR<AccidentVehicleUpdateWithoutAccidentInput, AccidentVehicleUncheckedUpdateWithoutAccidentInput>
    create: XOR<AccidentVehicleCreateWithoutAccidentInput, AccidentVehicleUncheckedCreateWithoutAccidentInput>
  }

  export type AccidentVehicleUpdateWithWhereUniqueWithoutAccidentInput = {
    where: AccidentVehicleWhereUniqueInput
    data: XOR<AccidentVehicleUpdateWithoutAccidentInput, AccidentVehicleUncheckedUpdateWithoutAccidentInput>
  }

  export type AccidentVehicleUpdateManyWithWhereWithoutAccidentInput = {
    where: AccidentVehicleScalarWhereInput
    data: XOR<AccidentVehicleUpdateManyMutationInput, AccidentVehicleUncheckedUpdateManyWithoutAccidentInput>
  }

  export type UserCreateWithoutClaimsInput = {
    name: string
    address: string
    contact_number: string
    email: string
    date_of_birth: Date | string
    role: string
    password: string
    insurancePolicies?: InsurancePolicyCreateNestedManyWithoutUserInput
    vehicles?: VehicleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutClaimsInput = {
    id?: number
    name: string
    address: string
    contact_number: string
    email: string
    date_of_birth: Date | string
    role: string
    password: string
    insurancePolicies?: InsurancePolicyUncheckedCreateNestedManyWithoutUserInput
    vehicles?: VehicleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutClaimsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClaimsInput, UserUncheckedCreateWithoutClaimsInput>
  }

  export type AccidentCreateWithoutClaimsInput = {
    date: Date | string
    location: string
    description: string
    vehicles?: VehicleCreateNestedManyWithoutAccidentsInput
    AccidentVehicle?: AccidentVehicleCreateNestedManyWithoutAccidentInput
  }

  export type AccidentUncheckedCreateWithoutClaimsInput = {
    id?: number
    date: Date | string
    location: string
    description: string
    vehicles?: VehicleUncheckedCreateNestedManyWithoutAccidentsInput
    AccidentVehicle?: AccidentVehicleUncheckedCreateNestedManyWithoutAccidentInput
  }

  export type AccidentCreateOrConnectWithoutClaimsInput = {
    where: AccidentWhereUniqueInput
    create: XOR<AccidentCreateWithoutClaimsInput, AccidentUncheckedCreateWithoutClaimsInput>
  }

  export type UserUpsertWithoutClaimsInput = {
    update: XOR<UserUpdateWithoutClaimsInput, UserUncheckedUpdateWithoutClaimsInput>
    create: XOR<UserCreateWithoutClaimsInput, UserUncheckedCreateWithoutClaimsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutClaimsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutClaimsInput, UserUncheckedUpdateWithoutClaimsInput>
  }

  export type UserUpdateWithoutClaimsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    insurancePolicies?: InsurancePolicyUpdateManyWithoutUserNestedInput
    vehicles?: VehicleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutClaimsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    insurancePolicies?: InsurancePolicyUncheckedUpdateManyWithoutUserNestedInput
    vehicles?: VehicleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccidentUpsertWithoutClaimsInput = {
    update: XOR<AccidentUpdateWithoutClaimsInput, AccidentUncheckedUpdateWithoutClaimsInput>
    create: XOR<AccidentCreateWithoutClaimsInput, AccidentUncheckedCreateWithoutClaimsInput>
    where?: AccidentWhereInput
  }

  export type AccidentUpdateToOneWithWhereWithoutClaimsInput = {
    where?: AccidentWhereInput
    data: XOR<AccidentUpdateWithoutClaimsInput, AccidentUncheckedUpdateWithoutClaimsInput>
  }

  export type AccidentUpdateWithoutClaimsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    vehicles?: VehicleUpdateManyWithoutAccidentsNestedInput
    AccidentVehicle?: AccidentVehicleUpdateManyWithoutAccidentNestedInput
  }

  export type AccidentUncheckedUpdateWithoutClaimsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    vehicles?: VehicleUncheckedUpdateManyWithoutAccidentsNestedInput
    AccidentVehicle?: AccidentVehicleUncheckedUpdateManyWithoutAccidentNestedInput
  }

  export type AccidentCreateWithoutAccidentVehicleInput = {
    date: Date | string
    location: string
    description: string
    claims?: ClaimCreateNestedManyWithoutAccidentInput
    vehicles?: VehicleCreateNestedManyWithoutAccidentsInput
  }

  export type AccidentUncheckedCreateWithoutAccidentVehicleInput = {
    id?: number
    date: Date | string
    location: string
    description: string
    claims?: ClaimUncheckedCreateNestedManyWithoutAccidentInput
    vehicles?: VehicleUncheckedCreateNestedManyWithoutAccidentsInput
  }

  export type AccidentCreateOrConnectWithoutAccidentVehicleInput = {
    where: AccidentWhereUniqueInput
    create: XOR<AccidentCreateWithoutAccidentVehicleInput, AccidentUncheckedCreateWithoutAccidentVehicleInput>
  }

  export type VehicleCreateWithoutAccidentVehicleInput = {
    make: string
    model: string
    year: number
    license_plate: string
    vin_number: string
    user: UserCreateNestedOneWithoutVehiclesInput
    insurancePolicies?: InsurancePolicyCreateNestedManyWithoutVehicleInput
    accidents?: AccidentCreateNestedManyWithoutVehiclesInput
  }

  export type VehicleUncheckedCreateWithoutAccidentVehicleInput = {
    id?: number
    user_id: number
    make: string
    model: string
    year: number
    license_plate: string
    vin_number: string
    insurancePolicies?: InsurancePolicyUncheckedCreateNestedManyWithoutVehicleInput
    accidents?: AccidentUncheckedCreateNestedManyWithoutVehiclesInput
  }

  export type VehicleCreateOrConnectWithoutAccidentVehicleInput = {
    where: VehicleWhereUniqueInput
    create: XOR<VehicleCreateWithoutAccidentVehicleInput, VehicleUncheckedCreateWithoutAccidentVehicleInput>
  }

  export type AccidentUpsertWithoutAccidentVehicleInput = {
    update: XOR<AccidentUpdateWithoutAccidentVehicleInput, AccidentUncheckedUpdateWithoutAccidentVehicleInput>
    create: XOR<AccidentCreateWithoutAccidentVehicleInput, AccidentUncheckedCreateWithoutAccidentVehicleInput>
    where?: AccidentWhereInput
  }

  export type AccidentUpdateToOneWithWhereWithoutAccidentVehicleInput = {
    where?: AccidentWhereInput
    data: XOR<AccidentUpdateWithoutAccidentVehicleInput, AccidentUncheckedUpdateWithoutAccidentVehicleInput>
  }

  export type AccidentUpdateWithoutAccidentVehicleInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    claims?: ClaimUpdateManyWithoutAccidentNestedInput
    vehicles?: VehicleUpdateManyWithoutAccidentsNestedInput
  }

  export type AccidentUncheckedUpdateWithoutAccidentVehicleInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    claims?: ClaimUncheckedUpdateManyWithoutAccidentNestedInput
    vehicles?: VehicleUncheckedUpdateManyWithoutAccidentsNestedInput
  }

  export type VehicleUpsertWithoutAccidentVehicleInput = {
    update: XOR<VehicleUpdateWithoutAccidentVehicleInput, VehicleUncheckedUpdateWithoutAccidentVehicleInput>
    create: XOR<VehicleCreateWithoutAccidentVehicleInput, VehicleUncheckedCreateWithoutAccidentVehicleInput>
    where?: VehicleWhereInput
  }

  export type VehicleUpdateToOneWithWhereWithoutAccidentVehicleInput = {
    where?: VehicleWhereInput
    data: XOR<VehicleUpdateWithoutAccidentVehicleInput, VehicleUncheckedUpdateWithoutAccidentVehicleInput>
  }

  export type VehicleUpdateWithoutAccidentVehicleInput = {
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    license_plate?: StringFieldUpdateOperationsInput | string
    vin_number?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutVehiclesNestedInput
    insurancePolicies?: InsurancePolicyUpdateManyWithoutVehicleNestedInput
    accidents?: AccidentUpdateManyWithoutVehiclesNestedInput
  }

  export type VehicleUncheckedUpdateWithoutAccidentVehicleInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    license_plate?: StringFieldUpdateOperationsInput | string
    vin_number?: StringFieldUpdateOperationsInput | string
    insurancePolicies?: InsurancePolicyUncheckedUpdateManyWithoutVehicleNestedInput
    accidents?: AccidentUncheckedUpdateManyWithoutVehiclesNestedInput
  }

  export type InsurancePolicyCreateManyUserInput = {
    id?: number
    vehicle_id: number
    policy_number?: string
    type: string
    start_date: Date | string
    end_date: Date | string
    amount: number
    status: string
  }

  export type VehicleCreateManyUserInput = {
    id?: number
    make: string
    model: string
    year: number
    license_plate: string
    vin_number: string
  }

  export type ClaimCreateManyUserInput = {
    id?: number
    accident_id: number
    claim_number: string
    date_submitted: Date | string
    status: string
    description: string
    amount_claimed: number
  }

  export type InsurancePolicyUpdateWithoutUserInput = {
    policy_number?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    vehicle?: VehicleUpdateOneRequiredWithoutInsurancePoliciesNestedInput
  }

  export type InsurancePolicyUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    vehicle_id?: IntFieldUpdateOperationsInput | number
    policy_number?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type InsurancePolicyUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    vehicle_id?: IntFieldUpdateOperationsInput | number
    policy_number?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type VehicleUpdateWithoutUserInput = {
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    license_plate?: StringFieldUpdateOperationsInput | string
    vin_number?: StringFieldUpdateOperationsInput | string
    insurancePolicies?: InsurancePolicyUpdateManyWithoutVehicleNestedInput
    accidents?: AccidentUpdateManyWithoutVehiclesNestedInput
    AccidentVehicle?: AccidentVehicleUpdateManyWithoutVehicleNestedInput
  }

  export type VehicleUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    license_plate?: StringFieldUpdateOperationsInput | string
    vin_number?: StringFieldUpdateOperationsInput | string
    insurancePolicies?: InsurancePolicyUncheckedUpdateManyWithoutVehicleNestedInput
    accidents?: AccidentUncheckedUpdateManyWithoutVehiclesNestedInput
    AccidentVehicle?: AccidentVehicleUncheckedUpdateManyWithoutVehicleNestedInput
  }

  export type VehicleUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    license_plate?: StringFieldUpdateOperationsInput | string
    vin_number?: StringFieldUpdateOperationsInput | string
  }

  export type ClaimUpdateWithoutUserInput = {
    claim_number?: StringFieldUpdateOperationsInput | string
    date_submitted?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount_claimed?: FloatFieldUpdateOperationsInput | number
    accident?: AccidentUpdateOneRequiredWithoutClaimsNestedInput
  }

  export type ClaimUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    accident_id?: IntFieldUpdateOperationsInput | number
    claim_number?: StringFieldUpdateOperationsInput | string
    date_submitted?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount_claimed?: FloatFieldUpdateOperationsInput | number
  }

  export type ClaimUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    accident_id?: IntFieldUpdateOperationsInput | number
    claim_number?: StringFieldUpdateOperationsInput | string
    date_submitted?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount_claimed?: FloatFieldUpdateOperationsInput | number
  }

  export type InsurancePolicyCreateManyVehicleInput = {
    id?: number
    user_id: number
    policy_number?: string
    type: string
    start_date: Date | string
    end_date: Date | string
    amount: number
    status: string
  }

  export type AccidentVehicleCreateManyVehicleInput = {
    id?: number
    accident_id: number
  }

  export type InsurancePolicyUpdateWithoutVehicleInput = {
    policy_number?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutInsurancePoliciesNestedInput
  }

  export type InsurancePolicyUncheckedUpdateWithoutVehicleInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    policy_number?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type InsurancePolicyUncheckedUpdateManyWithoutVehicleInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    policy_number?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type AccidentUpdateWithoutVehiclesInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    claims?: ClaimUpdateManyWithoutAccidentNestedInput
    AccidentVehicle?: AccidentVehicleUpdateManyWithoutAccidentNestedInput
  }

  export type AccidentUncheckedUpdateWithoutVehiclesInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    claims?: ClaimUncheckedUpdateManyWithoutAccidentNestedInput
    AccidentVehicle?: AccidentVehicleUncheckedUpdateManyWithoutAccidentNestedInput
  }

  export type AccidentUncheckedUpdateManyWithoutVehiclesInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type AccidentVehicleUpdateWithoutVehicleInput = {
    accident?: AccidentUpdateOneRequiredWithoutAccidentVehicleNestedInput
  }

  export type AccidentVehicleUncheckedUpdateWithoutVehicleInput = {
    id?: IntFieldUpdateOperationsInput | number
    accident_id?: IntFieldUpdateOperationsInput | number
  }

  export type AccidentVehicleUncheckedUpdateManyWithoutVehicleInput = {
    id?: IntFieldUpdateOperationsInput | number
    accident_id?: IntFieldUpdateOperationsInput | number
  }

  export type ClaimCreateManyAccidentInput = {
    id?: number
    user_id: number
    claim_number: string
    date_submitted: Date | string
    status: string
    description: string
    amount_claimed: number
  }

  export type AccidentVehicleCreateManyAccidentInput = {
    id?: number
    vehicle_id: number
  }

  export type ClaimUpdateWithoutAccidentInput = {
    claim_number?: StringFieldUpdateOperationsInput | string
    date_submitted?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount_claimed?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutClaimsNestedInput
  }

  export type ClaimUncheckedUpdateWithoutAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    claim_number?: StringFieldUpdateOperationsInput | string
    date_submitted?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount_claimed?: FloatFieldUpdateOperationsInput | number
  }

  export type ClaimUncheckedUpdateManyWithoutAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    claim_number?: StringFieldUpdateOperationsInput | string
    date_submitted?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount_claimed?: FloatFieldUpdateOperationsInput | number
  }

  export type VehicleUpdateWithoutAccidentsInput = {
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    license_plate?: StringFieldUpdateOperationsInput | string
    vin_number?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutVehiclesNestedInput
    insurancePolicies?: InsurancePolicyUpdateManyWithoutVehicleNestedInput
    AccidentVehicle?: AccidentVehicleUpdateManyWithoutVehicleNestedInput
  }

  export type VehicleUncheckedUpdateWithoutAccidentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    license_plate?: StringFieldUpdateOperationsInput | string
    vin_number?: StringFieldUpdateOperationsInput | string
    insurancePolicies?: InsurancePolicyUncheckedUpdateManyWithoutVehicleNestedInput
    AccidentVehicle?: AccidentVehicleUncheckedUpdateManyWithoutVehicleNestedInput
  }

  export type VehicleUncheckedUpdateManyWithoutAccidentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    license_plate?: StringFieldUpdateOperationsInput | string
    vin_number?: StringFieldUpdateOperationsInput | string
  }

  export type AccidentVehicleUpdateWithoutAccidentInput = {
    vehicle?: VehicleUpdateOneRequiredWithoutAccidentVehicleNestedInput
  }

  export type AccidentVehicleUncheckedUpdateWithoutAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    vehicle_id?: IntFieldUpdateOperationsInput | number
  }

  export type AccidentVehicleUncheckedUpdateManyWithoutAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    vehicle_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VehicleCountOutputTypeDefaultArgs instead
     */
    export type VehicleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VehicleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccidentCountOutputTypeDefaultArgs instead
     */
    export type AccidentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccidentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InsurancePolicyDefaultArgs instead
     */
    export type InsurancePolicyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InsurancePolicyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VehicleDefaultArgs instead
     */
    export type VehicleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VehicleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccidentDefaultArgs instead
     */
    export type AccidentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccidentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClaimDefaultArgs instead
     */
    export type ClaimArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClaimDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccidentVehicleDefaultArgs instead
     */
    export type AccidentVehicleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccidentVehicleDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}