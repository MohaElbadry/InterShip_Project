generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // Use your specific database provider
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  name              String
  address           String
  contact_number    String
  email             String            @unique
  date_of_birth     DateTime
  role              String            // e.g., client, admin
  password          String            // Added password field
  insurancePolicies InsurancePolicy[]
  vehicles          Vehicle[]
  claims            Claim[]

  @@map("user")
}

model ArchivedUser {
  id                Int               @id @default(autoincrement())
  name              String
  address           String
  contact_number    String
  email             String
  date_of_birth     DateTime
  role              String
  password          String
  archived_at       DateTime          @default(now()) // Timestamp of when the user was archived

  @@map("archived_user")
}


model InsurancePolicy {
  id            Int      @id @default(autoincrement())
  user_id       Int      // Updated to refer to user
  vehicle_id    Int
  policy_number String   @unique @default(cuid())
  type          String
  start_date    DateTime
  end_date      DateTime
  amount        Float
  status        String   // e.g., active, expired, cancelled
  user          User     @relation(fields: [user_id], references: [id]) // Updated
  vehicle       Vehicle  @relation(fields: [vehicle_id], references: [id])

  @@map("insurance_policy")
}

model ArchivedInsurancePolicy {
  id            Int      @id @default(autoincrement())
  user_id       Int
  vehicle_id    Int
  policy_number String   @unique
  type          String
  start_date    DateTime
  end_date      DateTime
  amount        Float
  status        String
  archived_at   DateTime @default(now()) // Timestamp of when the policy was archived

  @@map("archived_insurance_policy")
}


model Vehicle {
  id                Int               @id @default(autoincrement())
  user_id           Int               // Updated to refer to user
  make              String
  model             String
  year              Int
  license_plate     String
  picture_url       String?           // New field for picture URL
  vin_number        String            @unique
  user              User              @relation(fields: [user_id], references: [id]) // Updated
  insurancePolicies InsurancePolicy[]
  accidents         Accident[]        @relation("AccidentVehicle")
  AccidentVehicle   AccidentVehicle[]

  @@map("vehicle")
}


model ArchivedVehicle {
  id                Int               @id @default(autoincrement())
  user_id           Int
  make              String
  model             String
  year              Int
  license_plate     String
  picture_url       String?           // New field for picture URL
  vin_number        String            
  deleted_at        DateTime          @default(now()) // Timestamp of when the vehicle was archived
  
  @@map("archived_vehicle")
}

model Accident {
  id              Int               @id @default(autoincrement())
  date            DateTime
  location        String
  description     String
  claims          Claim[]
  vehicles        Vehicle[]         @relation("AccidentVehicle")
  AccidentVehicle AccidentVehicle[]

  @@map("accident")
}

model ArchivedAccident {
  id              Int               @id @default(autoincrement())
  date            DateTime
  location        String
  description     String
  archived_at     DateTime          @default(now()) // Timestamp of when the accident was archived

  @@map("archived_accident")
}


model Claim {
  id                Int      @id @default(autoincrement())
  user_id           Int
  accident_id       Int
  claim_number      String?  @unique
  date_submitted    DateTime
  date_modification DateTime  @default(now()) // Set default to current date
  status            String    @default("waiting")
  description       String
  amount_claimed    Float?
  user              User      @relation(fields: [user_id], references: [id])
  accident          Accident  @relation(fields: [accident_id], references: [id])

  @@map("claim")
}

model ArchivedClaim {
  id             Int      @id @default(autoincrement())
  user_id        Int
  accident_id    Int
  claim_number   String   @unique
  date_submitted DateTime
  status         String
  description    String
  amount_claimed Float
  archived_at    DateTime @default(now()) // Timestamp of when the claim was archived

  @@map("archived_claim")
}


model AccidentVehicle {
  id          Int         @id @default(autoincrement())
  accident_id Int
  vehicle_id  Int

  accident Accident @relation(fields: [accident_id], references: [id])
  vehicle  Vehicle  @relation(fields: [vehicle_id], references: [id])

  @@map("accident_vehicle")
}
